using Dianda.AP.BLL;
using Dianda.AP.Model;
using Dianda.AP.Model.API;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Transactions;
using System.Web;
using System.Web.Services;

namespace Web.API
{
    public enum SchoolManageTypeEnum
    {
        Add = 0,
        Update = 1,
        Delete = 2
    }

    /// <summary>
    /// Interface 的摘要说明
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // 若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消注释以下行。 
    // [System.Web.Script.Services.ScriptService]
    public class Interface : System.Web.Services.WebService
    {
        /// <summary>
        /// 学校管理接收方法
        /// </summary>
        /// <param name="schoolCodeBytes"></param>
        /// <param name="manageTypeEnumBytes"></param>
        /// <returns></returns>
        [WebMethod]
        public int SchoolManageReceive(byte[] schoolCodeBytes, byte[] manageTypeEnumBytes)
        {
            int rst = 0;
            schoolcode school = (schoolcode)(this.DeserializeObject(schoolCodeBytes));
            Organ_Detail model = ToOrgan(school);
            SchoolManageTypeEnum doType = (SchoolManageTypeEnum)(this.DeserializeObject(manageTypeEnumBytes));
            try
            {
                APIBLL api = new APIBLL();
                Organ_Detail tempOrgan;
                switch (doType)
                {
                    case SchoolManageTypeEnum.Add:
                        if (api.AddOrgan(model))
                            rst++;
                        break;
                    case SchoolManageTypeEnum.Update:
                        tempOrgan = api.GetOrganByOutId(Convert.ToInt32(model.OutSourceId));
                        model.Id = tempOrgan == null ? 0 : tempOrgan.Id;
                        if (api.UpdateOrgan(model))
                            rst++;
                        break;
                    case SchoolManageTypeEnum.Delete:
                        tempOrgan = api.GetOrganByOutId(Convert.ToInt32(model.OutSourceId));
                        model.Id = tempOrgan == null ? 0 : tempOrgan.Id;
                        if (api.DeleteOrgan(model.Id))
                            rst++;
                        break;
                }
            }
            catch (Exception)
            {
            }

            return rst;
        }

        /// <summary>
        /// 添加教师
        /// </summary>
        /// <param name="userModelBytes"></param>
        /// <param name="userNameBytes"></param>
        /// <param name="logContentBytes"></param>
        /// <param name="resultBytes"></param>
        /// <returns></returns>
        [WebMethod]
        public string TeacherAddReceive(byte[] userModelBytes, byte[] userNameBytes, byte[] logContentBytes, byte[] resultBytes)
        {
            CBK_SHERC_USERINFO model = (CBK_SHERC_USERINFO)(this.DeserializeObject(userModelBytes));
            string userName = this.DeserializeObject(userNameBytes).ToString();
            string logContent = this.DeserializeObject(logContentBytes).ToString();
            string result = this.DeserializeObject(resultBytes).ToString();
            Member_Account account = ToMemberAccount(model);
            MemberBaseInfo info = ToMemberBaseInfo(model);

            bool TnF;
            string TS;
            int rst;
            APIBLL api = new APIBLL();

            try
            {
                using (TransactionScope trans = new TransactionScope())
                {
                    api.AddMemberAccount(account);
                    info.AccountId = account.Id;
                    api.AddMemberBaseInfo(info);

                    trans.Complete();
                    TnF = true;
                    TS = "新增成功！";
                    rst = account.Id;
                }
            }
            catch (Exception)
            {
                TnF = false;
                TS = "新增失败！";
                rst = 0;
            }

            TempClass tc = new TempClass();
            tc.BIs = TnF;
            tc.Str = TS;
            tc.I = rst;
            return string.Format("{0};{1};{2}", tc.BIs, tc.Str, tc.I);
        }

        /// <summary>
        /// 更新教师
        /// </summary>
        /// <param name="userModelBytes"></param>
        /// <param name="userNameBytes"></param>
        /// <param name="logContentBytes"></param>
        /// <param name="resultBytes"></param>
        /// <returns></returns>
        [WebMethod]
        public string TeacherUpdateReceive(byte[] userModelBytes, byte[] userNameBytes, byte[] logContentBytes, byte[] resultBytes)
        {
            CBK_SHERC_USERINFO model = (CBK_SHERC_USERINFO)(this.DeserializeObject(userModelBytes));
            string userName = this.DeserializeObject(userNameBytes).ToString();
            string logContent = this.DeserializeObject(logContentBytes).ToString();
            string result = this.DeserializeObject(resultBytes).ToString();
            Member_Account account = ToMemberAccount(model);
            MemberBaseInfo info = ToMemberBaseInfo(model);

            bool TnF;
            string TS;
            int rst;
            APIBLL api = new APIBLL();

            try
            {
                using (TransactionScope trans = new TransactionScope())
                {
                    Member_Account tempModel = api.GetMemberAccountByOutId(Convert.ToInt32(account.OutSourceId));
                    int accountId = tempModel == null ? 0 : tempModel.Id;
                    account.Id = accountId;
                    info.AccountId = accountId;
                    if (api.AddMemberAccount(account) && api.AddMemberBaseInfo(info))
                    {
                        TnF = true;
                        TS = "更新成功！";
                        rst = accountId;
                    }
                    else
                    {
                        TnF = false;
                        TS = "更新失败！";
                        rst = 0;
                    }
                    trans.Complete();
                }
            }
            catch (Exception)
            {
                TnF = false;
                TS = "更新失败！";
                rst = 0;
            }

            TempClass tc = new TempClass();
            tc.BIs = TnF;
            tc.Str = TS;
            tc.I = rst;
            return string.Format("{0};{1};{2}", tc.BIs, tc.Str, tc.I);
        }

        /// <summary>
        /// 删除教师
        /// </summary>
        /// <param name="UserIDBytes"></param>
        /// <param name="userNameBytes"></param>
        /// <param name="logContentBytes"></param>
        /// <param name="resultBytes"></param>
        /// <returns></returns>
        [WebMethod]
        public string TeacherDeleteReceive(byte[] UserIDBytes, byte[] userNameBytes, byte[] logContentBytes, byte[] resultBytes)
        {
            int outId = Convert.ToInt32(this.DeserializeObject(UserIDBytes));
            string userName = this.DeserializeObject(userNameBytes).ToString();
            string logContent = this.DeserializeObject(logContentBytes).ToString();
            string result = this.DeserializeObject(resultBytes).ToString();

            bool TnF;
            string TS;
            int rst;
            APIBLL api = new APIBLL();

            try
            {
                using (TransactionScope trans = new TransactionScope())
                {
                    Member_Account tempModel = api.GetMemberAccountByOutId(outId);
                    int accountId = tempModel == null ? 0 : tempModel.Id;
                    if (api.DeleteMemberAccount(accountId) && api.DeleteMemberBaseInfo(accountId))
                    {
                        TnF = true;
                        TS = "删除成功！";
                        rst = accountId;
                    }
                    else
                    {
                        TnF = false;
                        TS = "删除失败！";
                        rst = 0;
                    }
                    trans.Complete();
                }
            }
            catch (Exception)
            {
                TnF = false;
                TS = "删除失败！";
                rst = 0;
            }

            TempClass tc = new TempClass();
            tc.BIs = TnF;
            tc.Str = TS;
            tc.I = rst;
            return string.Format("{0};{1};{2}", tc.BIs, tc.Str, tc.I);
        }

        /// <summary>
        /// 删除教师
        /// </summary>
        /// <param name="UserIDBytes"></param>
        /// <param name="userNameBytes"></param>
        /// <param name="logContentBytes"></param>
        /// <param name="resultBytes"></param>
        /// <returns></returns>
        [WebMethod]
        public string TeacherDelReceive(byte[] UserIDBytes, byte[] userNameBytes, byte[] logContentBytes, byte[] resultBytes)
        {
            int outId = Convert.ToInt32(this.DeserializeObject(UserIDBytes));
            string userName = this.DeserializeObject(userNameBytes).ToString();
            string logContent = this.DeserializeObject(logContentBytes).ToString();
            string result = this.DeserializeObject(resultBytes).ToString();

            bool TnF;
            string TS;
            int rst;
            APIBLL api = new APIBLL();

            try
            {
                using (TransactionScope trans = new TransactionScope())
                {
                    Member_Account tempModel = api.GetMemberAccountByOutId(outId);
                    int accountId = tempModel == null ? 0 : tempModel.Id;
                    if (api.DeleteMemberAccount(accountId) && api.DeleteMemberBaseInfo(accountId))
                    {
                        TnF = true;
                        TS = "删除成功！";
                        rst = accountId;
                    }
                    else
                    {
                        TnF = false;
                        TS = "删除失败！";
                        rst = 0;
                    }
                    trans.Complete();
                }
            }
            catch (Exception)
            {
                TnF = false;
                TS = "删除失败！";
                rst = 0;
            }

            TempClass tc = new TempClass();
            tc.BIs = TnF;
            tc.Str = TS;
            tc.I = rst;
            return string.Format("{0};{1};{2}", tc.BIs, tc.Str, tc.I);
        }

        #region 实体转换
        private Organ_Detail ToOrgan(schoolcode model)
        {
            Organ_Detail organ = new Organ_Detail();
            organ.Title = model.classname;
            if (!string.IsNullOrEmpty(model.DistrictID))
                organ.ParentId = Convert.ToInt32(model.DistrictID);
            organ.OType = 2;
            organ.CreateDate = DateTime.Now;
            organ.PartitionId = 1;
            if (!string.IsNullOrEmpty(model.XueQuID))
                organ.StudyRegionId = Convert.ToInt32(model.XueQuID);
            if (!string.IsNullOrEmpty(model.ID))
                organ.OutSourceId = Convert.ToInt32(model.ID);
            
            return organ;
        }

        private Member_Account ToMemberAccount(CBK_SHERC_USERINFO model)
        {
            Member_Account account = new Member_Account();
            account.UserName = model.ENAME;
            account.Password = model.PWD;
            account.Email = model.EMAIL;
            account.Status = Convert.ToInt32(model.STATUS);
            account.OrganId = model.QUXIANID;
            account.Pic = model.IMAGES;
            account.Nickname = model.ENAME;
            account.IsRealName = !string.IsNullOrEmpty(model.REALNAME);
            account.OutSourceId = model.ID;
            account.CreateDate = DateTime.Now;
            return account;
        }

        private MemberBaseInfo ToMemberBaseInfo(CBK_SHERC_USERINFO model)
        {
            MemberBaseInfo info = new MemberBaseInfo();
            info.TeacherNo = model.TEACHNUMBER;
            if (!string.IsNullOrEmpty(model.USERGroupsID))
                info.GroupId = Convert.ToInt32(model.USERGroupsID);
            info.RealName = model.REALNAME;
            info.Mobile = model.TELE;
            info.Phone = model.TELE;
            info.Address = model.ADDRESS;
            info.PostCode = model.POST;
            info.CredentialsType = 0;
            info.CredentialsNumber = model.IDCARD;
            info.Sex = Convert.ToInt32(model.SEX);
            info.Birthday = Convert.ToDateTime(model.BIRTHDAY);
            info.Nation = model.NATIONALID == null ? 0 : Convert.ToInt32(model.NATIONALID);
            info.PoliticalStatus = model.POLITICSID == null ? 0 : Convert.ToInt32(model.NATIONALID);
            info.RegionId = model.XUQUID == null ? 0 : Convert.ToInt32(model.XUQUID);
            info.StudySection = model.XUEDUANID;
            info.Organid = model.QUXIANID == null ? 0 : Convert.ToInt32(model.QUXIANID);
            info.Job = string.IsNullOrEmpty(model.USERJOBID) ? 0 : Convert.ToInt32(model.USERJOBID);
            info.WorkRank = string.IsNullOrEmpty(model.ZHICHENGID) ? 0 : Convert.ToInt32(model.ZHICHENGID);
            if (!string.IsNullOrEmpty(model.TrainingTypeID))
                info.TraningType = Convert.ToInt32(model.TrainingTypeID);
            info.TraningObject = model.TrainingObjectID;
            info.EduLevel = model.XUELIID;
            info.EduDegree = model.XUEWEIID;
            info.EduMajor = model.ZYDM;
            info.GraduateSchool = model.SchoolTag;
            info.GraduateTime = model.TIMESOFGRADUATE;
            info.CreateDate = DateTime.Now;
            return info;
        }
        #endregion

        /// <summary>
        /// 序列化二进制数据流
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        private byte[] SerializeObject(object obj)
        {
            byte[] rst;
            MemoryStream memoryStream = new MemoryStream();
            BinaryFormatter binaryFormatter = new BinaryFormatter();
            binaryFormatter.Serialize(memoryStream, obj);
            rst = memoryStream.GetBuffer();
            memoryStream.Dispose();
            memoryStream.Close();
            return rst;
        }

        /// <summary>
        /// 反序列化二进制数据流
        /// </summary>
        /// <param name="bytes"></param>
        /// <returns></returns>
        private object DeserializeObject(byte[] bytes)
        {
            BinaryFormatter binaryFormatter = new BinaryFormatter();
            binaryFormatter.Binder = new UBinder();
            return binaryFormatter.Deserialize(new MemoryStream(bytes));
        }

        public class UBinder : SerializationBinder
        {
            public override Type BindToType(string assemblyName, string typeName)
            {
                if (typeName.EndsWith("CBK_SHERC_USERINFO")) 
                    return typeof(Dianda.AP.Model.CBK_SHERC_USERINFO);

                if (typeName.EndsWith("schoolcode"))
                    return typeof(Dianda.AP.Model.schoolcode);

                if (typeName.EndsWith("SchoolManageTypeEnum"))
                    return typeof(Web.API.SchoolManageTypeEnum);

                if (typeName.EndsWith("TempClass"))
                    return typeof(Dianda.AP.Model.TempClass);

                Assembly ass = Assembly.GetExecutingAssembly();
                return ass.GetType(typeName);
            }

        }
    }
}

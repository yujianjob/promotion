using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using Dianda.AP.Model;
using Dianda.AP.Model.Course.CourseCreate;


namespace Dianda.AP.DAL
{
	public class Course_UnitDetailDAL
	{
		/// <summary>
		/// 新增一条记录
		/// </summary>
		/// <param name="model"></param>
		/// <returns></returns>
		public int Add(Course_UnitDetail model)
		{
			StringBuilder sql = new StringBuilder();
            sql.Append("insert into [dbo].[Course_UnitDetail] ([TrainingId],[Title],[Content],[ParentId],[Display],[Sort],[Delflag],[CreateDate])");
            sql.Append(" values (@TrainingId,@Title,@Content,@ParentId,@Display,@Sort,@Delflag,@CreateDate)");
			sql.Append(" set @Id=@@IDENTITY");
			SqlParameter[] cmdParams = new SqlParameter[]{
				new SqlParameter("@Id", SqlDbType.Int, 4) { Value = model.Id, Direction = ParameterDirection.Output },
				new SqlParameter("@TrainingId", SqlDbType.Int, 4) { Value = model.TrainingId },
				new SqlParameter("@Title", SqlDbType.VarChar, 200) { Value = model.Title },
				new SqlParameter("@Content", SqlDbType.VarChar, 8000) { Value = model.Content },
				new SqlParameter("@ParentId", SqlDbType.Int, 4) { Value = model.ParentId },
				new SqlParameter("@Display", SqlDbType.Bit, 1) { Value = model.Display },
				new SqlParameter("@Sort", SqlDbType.Int, 4) { Value = model.Sort },
				new SqlParameter("@Delflag", SqlDbType.Bit, 1) { Value = model.Delflag },
				new SqlParameter("@CreateDate", SqlDbType.DateTime, 8) { Value = model.CreateDate }
			};
			int result = Convert.ToInt32(MSEntLibSqlHelper.ExecuteNonQueryBySql(sql.ToString(), cmdParams));
			model.Id = Convert.ToInt32(cmdParams[0].Value);
			return result;
		}

		/// <summary>
		/// 更新一条记录
		/// </summary>
		/// <param name="model"></param>
		/// <returns></returns>
		public int Update(Course_UnitDetail model)
		{
			StringBuilder sql = new StringBuilder();
			sql.Append("update [dbo].[Course_UnitDetail] set ");
            sql.Append("[TrainingId]=@TrainingId,[Title]=@Title,[Content]=@Content,[ParentId]=@ParentId,[Display]=@Display,[Sort]=@Sort,[Delflag]=@Delflag,[CreateDate]=@CreateDate");
			sql.Append(" where [Id]=@Id");
			SqlParameter[] cmdParams = new SqlParameter[] {
				new SqlParameter("@Id", SqlDbType.Int, 4) { Value = model.Id },
				new SqlParameter("@TrainingId", SqlDbType.Int, 4) { Value = model.TrainingId },
				new SqlParameter("@Title", SqlDbType.VarChar, 200) { Value = model.Title },
				new SqlParameter("@Content", SqlDbType.VarChar, 8000) { Value = model.Content },
				new SqlParameter("@ParentId", SqlDbType.Int, 4) { Value = model.ParentId },
				new SqlParameter("@Display", SqlDbType.Bit, 1) { Value = model.Display },
				new SqlParameter("@Sort", SqlDbType.Int, 4) { Value = model.Sort },
				new SqlParameter("@Delflag", SqlDbType.Bit, 1) { Value = model.Delflag },
				new SqlParameter("@CreateDate", SqlDbType.DateTime, 8) { Value = model.CreateDate }
			};
			return MSEntLibSqlHelper.ExecuteNonQueryBySql(sql.ToString(), cmdParams);
		}

        /// <summary>
		/// 删除一条记录
		/// </summary>
        /// <param name="id"></param>
		/// <returns></returns>
		public int Delete(int id)
		{
			StringBuilder sql = new StringBuilder();
			sql.Append("update [dbo].[Course_UnitDetail] set ");
            sql.Append("Delflag = 1");
			sql.Append(" where [Id]=@Id");
			SqlParameter[] cmdParams = new SqlParameter[] {
				new SqlParameter("@Id", SqlDbType.Int, 4) { Value = id }
			};
			return MSEntLibSqlHelper.ExecuteNonQueryBySql(sql.ToString(), cmdParams);
		}

		/// <summary>
		/// 取得一条记录
		/// </summary>
		/// <param name="id"></param>
		/// <param name="where"></param>
		/// <returns></returns>
		public Course_UnitDetail GetModel(int id, string where)
		{
			string sql = "select * from [dbo].[Course_UnitDetail] where [Id]=@Id";
			if (!string.IsNullOrEmpty(where))
				sql += " and " + where;
			SqlParameter[] cmdParams = new SqlParameter[]{
				new SqlParameter("@Id", SqlDbType.Int, 4) { Value = id }
			};
			using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql, cmdParams))
			{
				if (reader.Read())
				{
					Course_UnitDetail model = new Course_UnitDetail();
					ConvertToModel(reader, model);
					return model;
				}
				else
				{
					return null;
				}
			}
		}

		/// <summary>
		/// 获取数据集
		/// </summary>
		/// <param name="where"></param>
		/// <param name="orderBy"></param>
		/// <returns></returns>
		public List<Course_UnitDetail> GetList(string where, string orderBy)
		{
			StringBuilder sql = new StringBuilder();
			sql.Append("select * from [dbo].[Course_UnitDetail]");
			if (!string.IsNullOrEmpty(where))
				sql.Append(" where " + where);
			if (!string.IsNullOrEmpty(orderBy))
				sql.Append(" order by " + orderBy);
			List<Course_UnitDetail> list = new List<Course_UnitDetail>();
			using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql.ToString()))
			{
				while (reader.Read())
				{
					Course_UnitDetail model = new Course_UnitDetail();
					ConvertToModel(reader, model);
					list.Add(model);
				}
			}
			return list;
		}

		/// <summary>
		/// 获取分页数据集
		/// </summary>
		/// <param name="pageSize"></param>
		/// <param name="pageIndex"></param>
		/// <param name="where"></param>
		/// <param name="orderBy"></param>
		/// <param name="recordCount"></param>
		/// <returns></returns>
		public List<Course_UnitDetail> GetList(int pageSize, int pageIndex, string where, string orderBy, out int recordCount)
		{
			if (string.IsNullOrEmpty(orderBy))
				throw new ArgumentNullException();
			StringBuilder sb = new StringBuilder();
			sb.Append("select count(1) from [dbo].[Course_UnitDetail]");
			if (!string.IsNullOrEmpty(where))
				sb.Append(" where " + where);
			recordCount = Convert.ToInt32(MSEntLibSqlHelper.ExecuteScalarBySql(sb.ToString()));
			int start = (pageIndex - 1) * pageSize + 1;
			int end = pageIndex * pageSize;
			StringBuilder sql = new StringBuilder();
			sql.Append("select * from (select *,ROW_NUMBER() over (order by " + orderBy + ") as [RowNum] from [dbo].[Course_UnitDetail]");
			if (!string.IsNullOrEmpty(where))
				sql.Append(" where " + where);
			sql.Append(") as T where [RowNum] between " + start + " and " + end);
			List<Course_UnitDetail> list = new List<Course_UnitDetail>();
			using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql.ToString()))
			{
				while (reader.Read())
				{
					Course_UnitDetail model = new Course_UnitDetail();
					ConvertToModel(reader, model);
					list.Add(model);
				}
			}
			return list;
		}

		/// <summary>
		/// 获取DataTable
		/// </summary>
		/// <param name="where"></param>
		/// <param name="orderBy"></param>
		/// <returns></returns>
		public DataTable GetTable(string where, string orderBy)
		{
			StringBuilder sql = new StringBuilder();
            sql.Append("select [Id],[TrainingId],[Title],[Content],[ParentId],[Display],[Sort],[Delflag],[CreateDate] from [dbo].[Course_UnitDetail]");
			if (!string.IsNullOrEmpty(where))
				sql.Append(" where " + where);
			if (!string.IsNullOrEmpty(orderBy))
				sql.Append(" order by " + orderBy);
			return MSEntLibSqlHelper.ExecuteDataSetBySql(sql.ToString()).Tables[0];
		}

		/// <summary>
		/// 获取分页DataTable
		/// </summary>
		/// <param name="pageSize"></param>
		/// <param name="pageIndex"></param>
		/// <param name="where"></param>
		/// <param name="orderBy"></param>
		/// <param name="recordCount"></param>
		/// <returns></returns>
		public DataTable GetTable(int pageSize, int pageIndex, string where, string orderBy, out int recordCount)
		{
			if (string.IsNullOrEmpty(orderBy))
				throw new ArgumentNullException();
			StringBuilder sb = new StringBuilder();
			sb.Append("select count(1) from [dbo].[Course_UnitDetail]");
			if (!string.IsNullOrEmpty(where))
				sb.Append(" where " + where);
			recordCount = Convert.ToInt32(MSEntLibSqlHelper.ExecuteScalarBySql(sb.ToString()));
			int start = (pageIndex - 1) * pageSize + 1;
			int end = pageIndex * pageSize;
			StringBuilder sql = new StringBuilder();
            sql.Append("select * from (select [Id],[TrainingId],[Title],[Content],[ParentId],[Display],[Sort],[Delflag],[CreateDate],ROW_NUMBER() over (order by " + orderBy + ") as [RowNum] from [dbo].[Course_UnitDetail]");
			if (!string.IsNullOrEmpty(where))
				sql.Append(" where " + where);
			sql.Append(") as T where [RowNum] between " + start + " and " + end);
			return MSEntLibSqlHelper.ExecuteDataSetBySql(sql.ToString()).Tables[0];
		}

		private void ConvertToModel(IDataReader reader, Course_UnitDetail model)
		{
			if (reader["Id"] != DBNull.Value)
				model.Id = Convert.ToInt32(reader["Id"]);
			if (reader["TrainingId"] != DBNull.Value)
                model.TrainingId = Convert.ToInt32(reader["TrainingId"]);
			if (reader["Title"] != DBNull.Value)
				model.Title = reader["Title"].ToString();
			if (reader["Content"] != DBNull.Value)
				model.Content = reader["Content"].ToString();
			if (reader["ParentId"] != DBNull.Value)
				model.ParentId = Convert.ToInt32(reader["ParentId"]);
			if (reader["Display"] != DBNull.Value)
				model.Display = Convert.ToBoolean(reader["Display"]);
			if (reader["Sort"] != DBNull.Value)
				model.Sort = Convert.ToInt32(reader["Sort"]);
			if (reader["Delflag"] != DBNull.Value)
				model.Delflag = Convert.ToBoolean(reader["Delflag"]);
			if (reader["CreateDate"] != DBNull.Value)
				model.CreateDate = Convert.ToDateTime(reader["CreateDate"]);
		}

        /// <summary>
        /// 获取指定ID的章节信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public List<Course_ChapterSectionInfo> GetChapterSectionInfo(int TrainingId,int id)
        {
            string sql = "select id,title,content,display from [dbo].[Course_UnitDetail] where TrainingId =@TrainingId and ParentId=@Id and Delflag=0 order by sort";
            SqlParameter[] cmdParams = new SqlParameter[]{
                new SqlParameter("@TrainingId", SqlDbType.Int, 4) { Value = TrainingId },
                new SqlParameter("@Id", SqlDbType.Int, 4) { Value = id }
            };

            List<Course_ChapterSectionInfo> list = new List<Course_ChapterSectionInfo>();
            using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql, cmdParams))
            {
                while(reader.Read())
                {
                    Course_ChapterSectionInfo model = new Course_ChapterSectionInfo();
                    model.Id = Convert.ToInt32(reader["id"]);
                    model.Title = reader["title"].ToString();
                    model.Content = reader["content"].ToString();
                    model.Display = Convert.ToBoolean(reader["display"]);
                    list.Add(model);
                }
            }

            return list;
        }

        /// <summary>
        /// 获取指定ID的的最大顺序号
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public int GetChapterSectionMaxOrder(int id,int TrainingId)
        {
            string sql = "select Max(Sort) as MaxSort from [dbo].[Course_UnitDetail] where TrainingId=@TrainingId and ParentId=@Id and Delflag=0";
            SqlParameter[] cmdParams = new SqlParameter[]{
                new SqlParameter("@TrainingId", SqlDbType.Int, 4) { Value = TrainingId },
                new SqlParameter("@Id", SqlDbType.Int, 4) { Value = id }
            };

            using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql, cmdParams))
            {
                if (reader.Read())
                {
                    if (reader["MaxSort"].ToString() != "")
                    {
                        return Convert.ToInt32(reader["MaxSort"]);
                    }
                    else
                    {
                        return 0;
                    }
                }
                else
                {
                    return 0;
                }
            }
        }

        /// <summary>
        /// 获取指定章节的总时长
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public int GetTotalTimeLength(int id)
        {
            string sql = @"select sum(timelength) as totallenth from dbo.Course_UnitContent 
                           where UnitId in(select id from Course_UnitDetail where (id = @id or parentid = @id) and delflag = 0) 
                           and UnitType != 6 and Delflag = 0";
            SqlParameter[] cmdParams = new SqlParameter[]{
                new SqlParameter("@Id", SqlDbType.Int, 4) { Value = id }
            };

            using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql, cmdParams))
            {
                if (reader.Read())
                {
                    if (reader["totallenth"].ToString() != "")
                    {
                        return Convert.ToInt32(reader["totallenth"]);
                    }
                    else
                    {
                        return 0;
                    }
                }
                else
                {
                    return 0;
                }
            }
        }
	}
}

using Dianda.AP.Model;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Dianda.AP.DAL
{
    //Class_Detail
    public partial class Class_DetailDAL
    {
        public Class_DetailDAL()
        { }

        #region  Method
        /// <summary>
        /// 得到最大ID
        /// </summary>
        public int GetMaxId()
        {
            string strsql = "select max(Id) from Class_Detail";
            DataSet obj = MSEntLibSqlHelper.ExecuteDataSetBySql(strsql);
            if (obj.Tables.Count <= 0 || obj.Tables[0].Rows[0] == null)
            {
                return 1;
            }
            else
            {
                return int.Parse(obj.Tables[0].Rows[0].ToString());
            }
        }
        // <summary>
        /// 是否存在该记录
        /// </summary>
        public bool Exists(int Id)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select count(1) from Class_Detail");
            strSql.Append(" where ");
            strSql.Append(" Id = @Id  ");
            SqlParameter[] parameters = {
                                            	new SqlParameter("@Id", SqlDbType.Int,4)  
                            };
            parameters[0].Value = Id;
            return MSEntLibSqlHelper.Exists(strSql.ToString(), parameters);
        }


        /// <summary>
        /// 增加一条数据
        /// </summary>
        public int Add(Model.Class_Detail model)
        {

            StringBuilder strSql = new StringBuilder();
            strSql.Append("insert into Class_Detail(");
            strSql.Append("People,LimitPeopleCnt,Address,Content,ManagerId,OrganId,Subject,StudyLevel,TeachGrade,TeachRank,Title,OrganRange,Instructor,Status,ApplyRemark,Display,Delflag,CreateDate,PartitionId,TraningId,PlanId,SignUpStartTime,SignUpEndTime,OpenClassFrom,OpenClassTo,ClassForm");
            strSql.Append(") values (");
            strSql.Append("@People,@LimitPeopleCnt,@Address,@Content,@ManagerId,@OrganId,@Subject,@StudyLevel,@TeachGrade,@TeachRank,@Title,@OrganRange,@Instructor,@Status,@ApplyRemark,@Display,@Delflag,@CreateDate,@PartitionId,@TraningId,@PlanId,@SignUpStartTime,@SignUpEndTime,@OpenClassFrom,@OpenClassTo,@ClassForm");
            strSql.Append(") ");
            strSql.Append(";select @@IDENTITY");
            SqlParameter[] parameters = {
			            new SqlParameter("@People", SqlDbType.Int,4) ,            
                        new SqlParameter("@LimitPeopleCnt", SqlDbType.Int,4) ,            
                        new SqlParameter("@Address", SqlDbType.VarChar,200) ,            
                        new SqlParameter("@Content", SqlDbType.VarChar,500) ,            
                        new SqlParameter("@ManagerId", SqlDbType.Int,4) ,            
                        new SqlParameter("@OrganId", SqlDbType.Int,4) ,            
                        new SqlParameter("@Subject", SqlDbType.VarChar,200) ,            
                        new SqlParameter("@StudyLevel", SqlDbType.VarChar,200) ,            
                        new SqlParameter("@TeachGrade", SqlDbType.VarChar,200) ,            
                        new SqlParameter("@TeachRank", SqlDbType.VarChar,200) ,            
                        new SqlParameter("@Title", SqlDbType.VarChar,200) ,            
                        new SqlParameter("@OrganRange", SqlDbType.VarChar,500) ,            
                        new SqlParameter("@Instructor", SqlDbType.Int,4) ,            
                        new SqlParameter("@Status", SqlDbType.Int,4) ,            
                        new SqlParameter("@ApplyRemark", SqlDbType.VarChar,500) ,            
                        new SqlParameter("@Display", SqlDbType.Bit,1) ,            
                        new SqlParameter("@Delflag", SqlDbType.Bit,1) ,            
                        new SqlParameter("@CreateDate", SqlDbType.DateTime) ,            
                        new SqlParameter("@PartitionId", SqlDbType.Int,4) ,            
                        new SqlParameter("@TraningId", SqlDbType.Int,4) ,            
                        new SqlParameter("@PlanId", SqlDbType.Int,4) ,            
                        new SqlParameter("@SignUpStartTime", SqlDbType.DateTime) ,            
                        new SqlParameter("@SignUpEndTime", SqlDbType.DateTime) ,            
                        new SqlParameter("@OpenClassFrom", SqlDbType.DateTime) ,            
                        new SqlParameter("@OpenClassTo", SqlDbType.DateTime) ,            
                        new SqlParameter("@ClassForm", SqlDbType.Int,4)             
              
            };
            parameters[0].Value = model.People;
            parameters[1].Value = model.LimitPeopleCnt;
            parameters[2].Value = model.Address;
            parameters[3].Value = model.Content;
            parameters[4].Value = model.ManagerId;
            parameters[5].Value = model.OrganId;
            parameters[6].Value = model.Subject;
            parameters[7].Value = model.StudyLevel;
            parameters[8].Value = model.TeachGrade;
            parameters[9].Value = model.TeachRank;
            parameters[10].Value = model.Title;
            parameters[11].Value = model.OrganRange;
            parameters[12].Value = model.Instructor;
            parameters[13].Value = model.Status;
            parameters[14].Value = model.ApplyRemark;
            parameters[15].Value = model.Display;
            parameters[16].Value = model.Delflag;
            parameters[17].Value = model.CreateDate;
            parameters[18].Value = model.PartitionId;
            parameters[19].Value = model.TraningId;
            parameters[20].Value = model.PlanId;
            parameters[21].Value = model.SignUpStartTime;
            parameters[22].Value = model.SignUpEndTime;
            parameters[23].Value = model.OpenClassFrom;
            parameters[24].Value = model.OpenClassTo;
            parameters[25].Value = model.ClassForm;



            object obj = MSEntLibSqlHelper.ExecuteScalarBySql(strSql.ToString(), parameters);
            if (obj == null)
            {
                return 0;
            }
            else
            {

                return Convert.ToInt32(obj);

            }

        }


        /// <summary>
        /// 更新一条数据
        /// </summary>
        public bool Update(Model.Class_Detail model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("update Class_Detail set ");

            strSql.Append(" People = @People , ");
            strSql.Append(" LimitPeopleCnt = @LimitPeopleCnt , ");
            strSql.Append(" Address = @Address , ");
            strSql.Append(" Content = @Content , ");
            strSql.Append(" ManagerId = @ManagerId , ");
            strSql.Append(" OrganId = @OrganId , ");
            strSql.Append(" Subject = @Subject , ");
            strSql.Append(" StudyLevel = @StudyLevel , ");
            strSql.Append(" TeachGrade = @TeachGrade , ");
            strSql.Append(" TeachRank = @TeachRank , ");
            strSql.Append(" Title = @Title , ");
            strSql.Append(" OrganRange = @OrganRange , ");
            strSql.Append(" Instructor = @Instructor , ");
            strSql.Append(" Status = @Status , ");
            strSql.Append(" ApplyRemark = @ApplyRemark , ");
            strSql.Append(" Display = @Display , ");
            strSql.Append(" Delflag = @Delflag , ");
            strSql.Append(" CreateDate = @CreateDate , ");
            strSql.Append(" PartitionId = @PartitionId , ");
            strSql.Append(" TraningId = @TraningId , ");
            strSql.Append(" PlanId = @PlanId , ");
            strSql.Append(" SignUpStartTime = @SignUpStartTime , ");
            strSql.Append(" SignUpEndTime = @SignUpEndTime , ");
            strSql.Append(" OpenClassFrom = @OpenClassFrom , ");
            strSql.Append(" OpenClassTo = @OpenClassTo , ");
            strSql.Append(" ClassForm = @ClassForm  ");
            strSql.Append(" where  ");
            strSql.Append(" Id = @Id  ");

            SqlParameter[] parameters = {
                        new SqlParameter("@People", SqlDbType.Int,4) ,      
                        new SqlParameter("@LimitPeopleCnt", SqlDbType.Int,4) ,      
                        new SqlParameter("@Address", SqlDbType.VarChar,200) ,      
                        new SqlParameter("@Content", SqlDbType.VarChar,500) ,      
                        new SqlParameter("@ManagerId", SqlDbType.Int,4) ,      
                        new SqlParameter("@OrganId", SqlDbType.Int,4) ,      
                        new SqlParameter("@Subject", SqlDbType.VarChar,200) ,      
                        new SqlParameter("@StudyLevel", SqlDbType.VarChar,200) ,      
                        new SqlParameter("@TeachGrade", SqlDbType.VarChar,200) ,      
                        new SqlParameter("@TeachRank", SqlDbType.VarChar,200) ,      
                        new SqlParameter("@Title", SqlDbType.VarChar,200) ,      
                        new SqlParameter("@OrganRange", SqlDbType.VarChar,500) ,      
                        new SqlParameter("@Instructor", SqlDbType.Int,4) ,      
                        new SqlParameter("@Status", SqlDbType.Int,4) ,      
                        new SqlParameter("@ApplyRemark", SqlDbType.VarChar,500) ,      
                        new SqlParameter("@Display", SqlDbType.Bit,1) ,      
                        new SqlParameter("@Delflag", SqlDbType.Bit,1) ,      
                        new SqlParameter("@CreateDate", SqlDbType.DateTime) ,      
                        new SqlParameter("@PartitionId", SqlDbType.Int,4) ,      
                        new SqlParameter("@TraningId", SqlDbType.Int,4) ,      
                        new SqlParameter("@PlanId", SqlDbType.Int,4) ,      
                        new SqlParameter("@SignUpStartTime", SqlDbType.DateTime) ,      
                        new SqlParameter("@SignUpEndTime", SqlDbType.DateTime) ,      
                        new SqlParameter("@OpenClassFrom", SqlDbType.DateTime) ,      
                        new SqlParameter("@OpenClassTo", SqlDbType.DateTime) ,      
                        new SqlParameter("@ClassForm", SqlDbType.Int,4) ,      
              
                                                  new SqlParameter("@Id", SqlDbType.Int,4)  
                            		
            };
            parameters[0].Value = model.People;
            parameters[1].Value = model.LimitPeopleCnt;
            parameters[2].Value = model.Address;
            parameters[3].Value = model.Content;
            parameters[4].Value = model.ManagerId;
            parameters[5].Value = model.OrganId;
            parameters[6].Value = model.Subject;
            parameters[7].Value = model.StudyLevel;
            parameters[8].Value = model.TeachGrade;
            parameters[9].Value = model.TeachRank;
            parameters[10].Value = model.Title;
            parameters[11].Value = model.OrganRange;
            parameters[12].Value = model.Instructor;
            parameters[13].Value = model.Status;
            parameters[14].Value = model.ApplyRemark;
            parameters[15].Value = model.Display;
            parameters[16].Value = model.Delflag;
            parameters[17].Value = model.CreateDate;
            parameters[18].Value = model.PartitionId;
            parameters[19].Value = model.TraningId;
            parameters[20].Value = model.PlanId;
            parameters[21].Value = model.SignUpStartTime;
            parameters[22].Value = model.SignUpEndTime;
            parameters[23].Value = model.OpenClassFrom;
            parameters[24].Value = model.OpenClassTo;
            parameters[25].Value = model.ClassForm;
            parameters[26].Value = model.Id;


            int rows = MSEntLibSqlHelper.ExecuteNonQueryBySql(strSql.ToString(), parameters);
            if (rows > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        /// <summary>
        /// 删除一条数据
        /// </summary>
        public bool Delete(int Id)
        {

            StringBuilder strSql = new StringBuilder();
            strSql.Append("delete from Class_Detail ");
            strSql.Append(" where ");
            strSql.Append(" Id = @Id  ");

            SqlParameter[] parameters = {
                                            	new SqlParameter("@Id", SqlDbType.Int,4)  
                            };
            parameters[0].Value = Id;

            int rows = MSEntLibSqlHelper.ExecuteNonQueryBySql(strSql.ToString(), parameters);
            if (rows > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 批量删除一批数据
        /// </summary>
        public bool DeleteList(string Idlist)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("delete from Class_Detail ");
            strSql.Append(" where ID in (" + Idlist + ")  ");
            int rows = MSEntLibSqlHelper.ExecuteNonQueryBySql(strSql.ToString());
            if (rows > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public Model.Class_Detail GetModel(int Id)
        {

            StringBuilder strSql = new StringBuilder();
            strSql.Append("select Id, People, LimitPeopleCnt, Address, Content, ManagerId, OrganId, Subject, StudyLevel, TeachGrade, TeachRank, Title, OrganRange, Instructor, Status, ApplyRemark, Display, Delflag, CreateDate, PartitionId, TraningId, PlanId, SignUpStartTime, SignUpEndTime, OpenClassFrom, OpenClassTo, ClassForm  ");
            strSql.Append("  from Class_Detail ");
            strSql.Append(" where ");
            strSql.Append(" Id = @Id  ");

            SqlParameter[] parameters = {
                                            	new SqlParameter("@Id", SqlDbType.Int,4)  
                            };
            parameters[0].Value = Id;

            Model.Class_Detail model = new Model.Class_Detail();
            DataSet ds = MSEntLibSqlHelper.ExecuteDataSetBySql(strSql.ToString(), parameters);

            if (ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0]["Id"].ToString() != "")
                {
                    model.Id = int.Parse(ds.Tables[0].Rows[0]["Id"].ToString());
                }
                if (ds.Tables[0].Rows[0]["People"].ToString() != "")
                {
                    model.People = int.Parse(ds.Tables[0].Rows[0]["People"].ToString());
                }
                if (ds.Tables[0].Rows[0]["LimitPeopleCnt"].ToString() != "")
                {
                    model.LimitPeopleCnt = int.Parse(ds.Tables[0].Rows[0]["LimitPeopleCnt"].ToString());
                }
                model.Address = ds.Tables[0].Rows[0]["Address"].ToString();
                model.Content = ds.Tables[0].Rows[0]["Content"].ToString();
                if (ds.Tables[0].Rows[0]["ManagerId"].ToString() != "")
                {
                    model.ManagerId = int.Parse(ds.Tables[0].Rows[0]["ManagerId"].ToString());
                }
                if (ds.Tables[0].Rows[0]["OrganId"].ToString() != "")
                {
                    model.OrganId = int.Parse(ds.Tables[0].Rows[0]["OrganId"].ToString());
                }
                model.Subject = ds.Tables[0].Rows[0]["Subject"].ToString();
                model.StudyLevel = ds.Tables[0].Rows[0]["StudyLevel"].ToString();
                model.TeachGrade = ds.Tables[0].Rows[0]["TeachGrade"].ToString();
                model.TeachRank = ds.Tables[0].Rows[0]["TeachRank"].ToString();
                model.Title = ds.Tables[0].Rows[0]["Title"].ToString();
                model.OrganRange = ds.Tables[0].Rows[0]["OrganRange"].ToString();
                if (ds.Tables[0].Rows[0]["Instructor"].ToString() != "")
                {
                    model.Instructor = int.Parse(ds.Tables[0].Rows[0]["Instructor"].ToString());
                }
                if (ds.Tables[0].Rows[0]["Status"].ToString() != "")
                {
                    model.Status = int.Parse(ds.Tables[0].Rows[0]["Status"].ToString());
                }
                model.ApplyRemark = ds.Tables[0].Rows[0]["ApplyRemark"].ToString();
                if (ds.Tables[0].Rows[0]["Display"].ToString() != "")
                {
                    if ((ds.Tables[0].Rows[0]["Display"].ToString() == "1") || (ds.Tables[0].Rows[0]["Display"].ToString().ToLower() == "true"))
                    {
                        model.Display = true;
                    }
                    else
                    {
                        model.Display = false;
                    }
                }
                if (ds.Tables[0].Rows[0]["Delflag"].ToString() != "")
                {
                    if ((ds.Tables[0].Rows[0]["Delflag"].ToString() == "1") || (ds.Tables[0].Rows[0]["Delflag"].ToString().ToLower() == "true"))
                    {
                        model.Delflag = true;
                    }
                    else
                    {
                        model.Delflag = false;
                    }
                }
                if (ds.Tables[0].Rows[0]["CreateDate"].ToString() != "")
                {
                    model.CreateDate = DateTime.Parse(ds.Tables[0].Rows[0]["CreateDate"].ToString());
                }
                if (ds.Tables[0].Rows[0]["PartitionId"].ToString() != "")
                {
                    model.PartitionId = int.Parse(ds.Tables[0].Rows[0]["PartitionId"].ToString());
                }
                if (ds.Tables[0].Rows[0]["TraningId"].ToString() != "")
                {
                    model.TraningId = int.Parse(ds.Tables[0].Rows[0]["TraningId"].ToString());
                }
                if (ds.Tables[0].Rows[0]["PlanId"].ToString() != "")
                {
                    model.PlanId = int.Parse(ds.Tables[0].Rows[0]["PlanId"].ToString());
                }
                if (ds.Tables[0].Rows[0]["SignUpStartTime"].ToString() != "")
                {
                    model.SignUpStartTime = DateTime.Parse(ds.Tables[0].Rows[0]["SignUpStartTime"].ToString());
                }
                if (ds.Tables[0].Rows[0]["SignUpEndTime"].ToString() != "")
                {
                    model.SignUpEndTime = DateTime.Parse(ds.Tables[0].Rows[0]["SignUpEndTime"].ToString());
                }
                if (ds.Tables[0].Rows[0]["OpenClassFrom"].ToString() != "")
                {
                    model.OpenClassFrom = DateTime.Parse(ds.Tables[0].Rows[0]["OpenClassFrom"].ToString());
                }
                if (ds.Tables[0].Rows[0]["OpenClassTo"].ToString() != "")
                {
                    model.OpenClassTo = DateTime.Parse(ds.Tables[0].Rows[0]["OpenClassTo"].ToString());
                }
                if (ds.Tables[0].Rows[0]["ClassForm"].ToString() != "")
                {
                    model.ClassForm = int.Parse(ds.Tables[0].Rows[0]["ClassForm"].ToString());
                }

                return model;
            }
            else
            {
                return null;
            }
        }


        /// <summary>
        /// 获得数据列表
        /// </summary>
        public DataSet GetList(string strWhere)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select * ");
            strSql.Append(" FROM Class_Detail ");
            if (strWhere.Trim() != "")
            {
                strSql.Append(" where " + strWhere);
            }
            return MSEntLibSqlHelper.ExecuteDataSetBySql(strSql.ToString());
        }

        /// <summary>
        /// 获得前几行数据
        /// </summary>
        public DataSet GetList(int Top, string strWhere, string filedOrder)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select ");
            if (Top > 0)
            {
                strSql.Append(" top " + Top.ToString());
            }
            strSql.Append(" * ");
            strSql.Append(" FROM Class_Detail ");
            if (strWhere.Trim() != "")
            {
                strSql.Append(" where " + strWhere);
            }
            strSql.Append(" order by " + filedOrder);
            return MSEntLibSqlHelper.ExecuteDataSetBySql(strSql.ToString());
        }

        #endregion

        public List<Class_Detail> GetList(int pageSize, int pageIndex, string where, string orderBy, out int recordCount)
        {
            if (string.IsNullOrEmpty(orderBy))
                throw new ArgumentNullException();
            StringBuilder sb = new StringBuilder();
            sb.Append("select count(1) from [dbo].[Class_Detail]");
            if (!string.IsNullOrEmpty(where))
                sb.Append(" where " + where);
            recordCount = Convert.ToInt32(MSEntLibSqlHelper.ExecuteScalarBySql(sb.ToString()));
            int start = (pageIndex - 1) * pageSize + 1;
            int end = pageIndex * pageSize;
            StringBuilder sql = new StringBuilder();
            sql.Append("select * from (select *,ROW_NUMBER() over (order by " + orderBy + ") as [RowNum] from [dbo].[Class_Detail]");
            if (!string.IsNullOrEmpty(where))
                sql.Append(" where " + where);
            sql.Append(") as T where [RowNum] between " + start + " and " + end);
            List<Class_Detail> list = new List<Class_Detail>();
            using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql.ToString()))
            {
                while (reader.Read())
                {
                    Class_Detail model = new Class_Detail();
                    ConvertToModel(reader, model);
                    list.Add(model);
                }
            }
            return list;
        }


        private void ConvertToModel(IDataReader reader, Class_Detail model)
        {
            if (reader["Id"] != DBNull.Value)
                model.Id = Convert.ToInt32(reader["Id"]);
            if (reader["Title"] != DBNull.Value)
                model.Title = reader["Title"].ToString();
            if (reader["TraningId"] != DBNull.Value)
                model.TraningId = Convert.ToInt32(reader["TraningId"]);
            if (reader["PlanId"] != DBNull.Value)
                model.PlanId = Convert.ToInt32(reader["PlanId"]);
            if (reader["SignUpStartTime"] != DBNull.Value)
                model.SignUpStartTime = Convert.ToDateTime(reader["SignUpStartTime"]);
            if (reader["SignUpEndTime"] != DBNull.Value)
                model.SignUpEndTime = Convert.ToDateTime(reader["SignUpEndTime"]);
            if (reader["OpenClassFrom"] != DBNull.Value)
                model.OpenClassFrom = Convert.ToDateTime(reader["OpenClassFrom"]);
            if (reader["OpenClassTo"] != DBNull.Value)
                model.OpenClassTo = Convert.ToDateTime(reader["OpenClassTo"]);
            if (reader["ClassForm"] != DBNull.Value)
                model.ClassForm = Convert.ToInt32(reader["ClassForm"]);
            if (reader["People"] != DBNull.Value)
                model.People = Convert.ToInt32(reader["People"]);
            if (reader["LimitPeopleCnt"] != DBNull.Value)
                model.LimitPeopleCnt = Convert.ToInt32(reader["LimitPeopleCnt"]);
            if (reader["Address"] != DBNull.Value)
                model.Address = reader["Address"].ToString();
            if (reader["Content"] != DBNull.Value)
                model.Content = reader["Content"].ToString();
            if (reader["ManagerId"] != DBNull.Value)
                model.ManagerId = Convert.ToInt32(reader["ManagerId"]);
            if (reader["OrganId"] != DBNull.Value)
                model.OrganId = Convert.ToInt32(reader["OrganId"]);
            if (reader["Subject"] != DBNull.Value)
                model.Subject = reader["Subject"].ToString();
            if (reader["StudyLevel"] != DBNull.Value)
                model.StudyLevel = reader["StudyLevel"].ToString();
            if (reader["TeachGrade"] != DBNull.Value)
                model.TeachGrade = reader["TeachGrade"].ToString();
            if (reader["TeachRank"] != DBNull.Value)
                model.TeachRank = reader["TeachRank"].ToString();
            if (reader["OrganRange"] != DBNull.Value)
                model.OrganRange = reader["OrganRange"].ToString();
            if (reader["Instructor"] != DBNull.Value)
                model.Instructor = Convert.ToInt32(reader["Instructor"]);
            if (reader["Status"] != DBNull.Value)
                model.Status = Convert.ToInt32(reader["Status"]);
            if (reader["ApplyRemark"] != DBNull.Value)
                model.ApplyRemark = reader["ApplyRemark"].ToString();
            if (reader["Display"] != DBNull.Value)
                model.Display = Convert.ToBoolean(reader["Display"]);
            if (reader["Delflag"] != DBNull.Value)
                model.Delflag = Convert.ToBoolean(reader["Delflag"]);
            if (reader["CreateDate"] != DBNull.Value)
                model.CreateDate = Convert.ToDateTime(reader["CreateDate"]);
            if (reader["PartitionId"] != DBNull.Value)
                model.PartitionId = Convert.ToInt32(reader["PartitionId"]);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Data;
using System.Web.Mvc;
using Dianda.AP.Model;
using Dianda.AP.BLL;
using System.Reflection;
using System.IO;

namespace Web.Areas.Prepare.Controllers
{
    public class PeriodController : Controller
    {
        //
        // GET: /Prepare/Period/

        PlanExemptionBLL planbll = new PlanExemptionBLL();
        PeriodBLL bll = new PeriodBLL();
        public ActionResult Index()
        {
            string where = "";
            int pageSize=0;
            if(!string.IsNullOrEmpty(Request["pageSize"]))
            {
                pageSize=Convert.ToInt32(Request["pageSize"]);
            }else
            {
                pageSize=10;
            }

            int GroupId = Code.SiteCache.Instance.GroupId;    //权限组ID
            int PlanId = Code.SiteCache.Instance.PlanId;    //本学期ID
            int PartitionId = Code.SiteCache.Instance.LoginInfo.PartitionId;     //本区ID
            int OrganId = Code.SiteCache.Instance.ManageOrganId;    //机构ID
            if (GroupId == 1)
            {
                where += " and a.PlanId = " + PlanId + " ";
            }
            else if (GroupId == 2)
            {
                where += " and a.PlanId = " + PlanId + " and g.OrganId = " + OrganId + " or g.OrganId in (select Id from dbo.Organ_Detail where ParentId = " + OrganId + " ) ";
            }
            else
            {
                where += " and a.PlanId = " + PlanId + " and g.OrganId = " + OrganId + " ";
            }

            if (string.IsNullOrEmpty(Request["whereOrganTo"]))
            {
                if (!string.IsNullOrEmpty(Request["whereOrgan"]))
                {
                    where += " and f.id = " + Request["whereOrgan"] + " or f.ParentId = " + Request["whereOrgan"] + " ";
                }
            }
            else
            {
                where += "and f.id = " + Request["whereOrganTo"] + " or f.ParentId = " + Request["whereOrganTo"] + " ";
            }

            if (!string.IsNullOrEmpty(Request["whereName"]))
            {
                where += " and c.RealName like '%" + Request["whereName"] + "%' or c.TeacherNo like '%" + Request["whereName"] + "%' or c.CredentialsNumber like '" + Request["whereName"] + "' ";
            }


            ViewBag.ColumnDt = bll.GetTrainingFie();
            ViewBag.GetList = bll.GetList(pageSize, where, " a.Id desc ");
            ViewData["whereOrgan"] = Request["whereOrgan"];
            ViewData["whereOrganTo"] = Request["whereOrganTo"];
            ViewData["whereName"] = Request["whereName"] == null ? "" : Request["whereName"];
            ViewData["pageSize"] = pageSize;
            DataTable dt = planbll.GetOrgan(0);
            List<SelectListItem> selectlist = new List<SelectListItem>();
            List<SelectListItem> tolist = new List<SelectListItem>();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                SelectListItem item = new SelectListItem()
                {
                    Text = dt.Rows[i][1].ToString(),
                    Value = dt.Rows[i][0].ToString()
                };
                selectlist.Add(item);
            }
            ViewData["Organ"] = selectlist;
            ViewData["OrganTo"] = tolist;
            return View();
        }


        public ActionResult GetOrganTo(int id)
        {
            DataTable dt = planbll.GetOrgan(id);
            List<SelectListItem> list = new List<SelectListItem>();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                SelectListItem item = new SelectListItem
                {
                    Text = dt.Rows[i][1].ToString(),
                    Value = dt.Rows[i][0].ToString()
                };
                list.Add(item);
            }

            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetSearch(int AccountId)
        {
            int PlanId = Code.SiteCache.Instance.PlanId;
            List<SearchModel> list = new List<SearchModel>();
            DataTable SearchDt = bll.GetSearch(AccountId,PlanId);
            for (int i = 0; i < SearchDt.Rows.Count; i++)
            {
                SearchModel model = new SearchModel();
                model.FidTitle = SearchDt.Rows[i]["FidTitle"].ToString();
                model.DetailTitle = SearchDt.Rows[i]["DetailTitle"].ToString();
                if (SearchDt.Rows[i]["Credits"] != DBNull.Value)
                {
                    model.Credits = Convert.ToDouble(SearchDt.Rows[i]["Credits"]);
                }
                else
                {
                    model.Credits = 0;
                }
                if (SearchDt.Rows[i]["CreateDate"] != DBNull.Value)
                {
                    model.CreateDate = Convert.ToDateTime(SearchDt.Rows[i]["CreateDate"]);
                }
                else
                {
                    model.CreateDate = DateTime.Now;
                }
                list.Add(model);
            }

            return Json(list, JsonRequestBehavior.AllowGet);
        }


        public ActionResult Export(int AccountId)
        {
            DataTable dt = bll.GetSearch(AccountId, Code.SiteCache.Instance.PlanId);

            if (dt.Rows.Count == 0)
            {
                return Content("no:无导出数据！！！");
            }
            else
            {
                string path = Server.MapPath("/Areas/Prepare/Execl/Period/");
                if (!Directory.Exists(path))
                    Directory.CreateDirectory(path);
                string fileName = "免修记录" + Guid.NewGuid().ToString("N") + ".csv";
                string filePath = path + fileName;


                FileStream fs = new FileStream(filePath, System.IO.FileMode.Create, System.IO.FileAccess.Write);
                StreamWriter sw = new StreamWriter(fs, System.Text.Encoding.Default);
                string data = "类型,课程名称,学时,获得日期";

                sw.WriteLine(data);

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    data = "";
                    for (int j = 0; j < dt.Columns.Count; j++)
                    {
                        data += dt.Rows[i][j].ToString().Replace(",", "，").Replace(" ", "，").Replace("\n", "").Replace("\r", "");
                        if (j < dt.Columns.Count - 1)
                        {
                            data += ",";
                        }
                    }
                    sw.WriteLine(data);
                }

                sw.Close();
                fs.Close();

                return File(new FileStream(Server.MapPath("/Areas/Prepare/Execl/Period/" + fileName), FileMode.Open), "application/octet-stream", fileName);
            }
        }
    }
}

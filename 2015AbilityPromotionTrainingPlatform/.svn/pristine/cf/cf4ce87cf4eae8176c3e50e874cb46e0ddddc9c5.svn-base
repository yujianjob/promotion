using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Dianda.AP.Model;

namespace Dianda.AP.DAL
{
    public class PeriodDAL
    {
        public DataTable GetTrainingFie()
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(" select Id,Title from Traning_Field where DisPlay = 1 and Delflag = 0 ");
            return MSEntLibSqlHelper.ExecuteDataSetBySql(sql.ToString()).Tables[0];
        }


        public DataTable GetList(int pageSize, int pageIndex, string where, string orderBy, out int recordCount)
        {
            DataTable Fie = GetTrainingFie();
            if (string.IsNullOrEmpty(orderBy))
                throw new ArgumentNullException();

            StringBuilder sb = new StringBuilder();
            sb.Append(" select * from (   ");
            sb.Append(" select a.AccountId,b.TeacherNo,case when b.RealName is null  ");
            sb.Append(" then g.UserName else b.RealName end as RealName,d.Title,  ");
            sb.Append(" convert(varchar,c.Credits)+'/'+CONVERT(varchar,e.MinValue) ");
            sb.Append(" as value,f.Result  from Member_ClassRegister a  ");
            sb.Append(" left join Member_BaseInfo b on a.AccountId = b.AccountId   ");
            sb.Append(" left join Member_TrainingRedit c on a.AccountId = c.AccountId  ");
            sb.Append(" left join Traning_Field d on c.TrainingField = d.Id ");
            sb.Append(" left join Training_Credits e on d.Id = e.TraningField  ");
            sb.Append(" and b.Organid = e.OrganId   ");
            sb.Append(" left join Member_PlanOverall f on a.AccountId = f.AccountId  ");
            sb.Append(" left join Member_Account g on a.AccountId = g.Id  where a.Delflag = 0  ");
            if (!string.IsNullOrEmpty(where))
                sb.Append(where);
            sb.Append(" ) t pivot ( Max(value) for t.Title in ( ");
            for (int i = 0; i < Fie.Rows.Count; i++)
            {
                if (i != Fie.Rows.Count - 1)
                {
                    sb.Append("[" + Fie.Rows[i][1].ToString() + "],");
                }
                else
                {
                    sb.Append("[" + Fie.Rows[i][1].ToString() + "]");
                }
            }
            sb.Append(")) as ourpivot");
            recordCount = MSEntLibSqlHelper.ExecuteDataSetBySql(sb.ToString()).Tables[0].Rows.Count;

            int start = (pageIndex - 1) * pageSize + 1;
            int end = pageIndex * pageSize;

            StringBuilder sql = new StringBuilder();
            sql.Append(" select * from ( ");
            sql.Append(" select *,ROW_NUMBER() over (order by " + orderBy + ") as RowNum from (   ");
            sql.Append(" select a.AccountId,b.TeacherNo,case when b.RealName is null  ");
            sql.Append(" then g.UserName else b.RealName end as RealName,d.Title,  ");
            sql.Append(" convert(varchar,c.Credits)+'/'+CONVERT(varchar,e.MinValue) ");
            sql.Append(" as value,f.Result  from Member_ClassRegister a  ");
            sql.Append(" left join Member_BaseInfo b on a.AccountId = b.AccountId   ");
            sql.Append(" left join Member_TrainingRedit c on a.AccountId = c.AccountId  ");
            sql.Append(" left join Traning_Field d on c.TrainingField = d.Id ");
            sql.Append(" left join Training_Credits e on d.Id = e.TraningField  ");
            sql.Append(" and b.Organid = e.OrganId   ");
            sql.Append(" left join Member_PlanOverall f on a.AccountId = f.AccountId  ");
            sql.Append(" left join Member_Account g on a.AccountId = g.Id  where a.Delflag = 0  ");
            if (!string.IsNullOrEmpty(where))
                sql.Append(where);
            sql.Append(" ) t pivot ( Max(value) for t.Title in ( ");
            for (int i = 0; i < Fie.Rows.Count; i++)
            {
                if (i != Fie.Rows.Count - 1)
                {
                    sql.Append("[" + Fie.Rows[i][1].ToString() + "],");
                }
                else
                {
                    sql.Append("[" + Fie.Rows[i][1].ToString() + "]");
                }
            }
            sql.Append(")) as ourpivot) as t  where RowNum between " + start + " and " + end);

            DataTable dt = MSEntLibSqlHelper.ExecuteDataSetBySql(sql.ToString()).Tables[0];
            return dt;
        }


        public DataTable GetSearch(int AccountId,int PlanId)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(" select d.Title as FidTitle,b.Title as DetailTitle,c.Credits,c.CreateDate from Member_ClassRegister a ");
            sql.Append(" left join Traning_Detail b on a.TrainingId = b.Id ");
            sql.Append(" left join Member_TrainingRedit c on a.TrainingId = c.AccountId ");
            sql.Append(" left join dbo.Traning_Field d on b.TraingField = d.Id ");
            sql.Append(" where a.AccountId = " + AccountId + " and a.PlanId = " + PlanId + "");

            return MSEntLibSqlHelper.ExecuteDataSetBySql(sql.ToString()).Tables[0];
        }



        private void ConvertToModel(IDataReader reader, PeriodModel model)
        {
            if (reader["AccountId"] != DBNull.Value)
                model.AccountId = Convert.ToInt32(reader["AccountId"]);

            if (reader["RealName"] != DBNull.Value)
                model.RealName = reader["RealName"].ToString();

            if (reader["TeacherNo"] != DBNull.Value)
                model.TeacherNo = reader["TeacherNo"].ToString();

            if (reader["Value"] != DBNull.Value)
                model.Value = reader["Value"].ToString();

            if (reader["Result"] != DBNull.Value)
                model.Result = Convert.ToInt32(reader["Result"]);
        }
    }
}

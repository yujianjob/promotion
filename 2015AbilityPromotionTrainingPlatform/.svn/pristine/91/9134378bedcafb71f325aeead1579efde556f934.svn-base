using Dianda.AP.Model;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;

namespace Dianda.AP.DAL
{
	public class Traning_DetailDAL
	{
        /// <summary>
        /// 新增一条记录
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public int Add(Traning_Detail model)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("insert into [dbo].[Traning_Detail] ([Title],[Content],[Pic],[Creater],[OrganId],[TraingField],[TraingCategory],[TraingTopic],[TraningObject],[Subject],[StudyLevel],[TotalTime],[TrainingForm],[TeacherTitle],[TeacherName],[TeacherFrom],[TeacherPic],[Outline],[PartitionId],[OutSideType],[OutSideLink],[Range],[Status],[ApplyRemark],[Display],[Delflag],[CreateDate],[ParentOrganId],[OutSideContent])");
            sql.Append(" values (@Title,@Content,@Pic,@Creater,@OrganId,@TraingField,@TraingCategory,@TraingTopic,@TraningObject,@Subject,@StudyLevel,@TotalTime,@TrainingForm,@TeacherTitle,@TeacherName,@TeacherFrom,@TeacherPic,@Outline,@PartitionId,@OutSideType,@OutSideLink,@Range,@Status,@ApplyRemark,@Display,@Delflag,@CreateDate,@ParentOrganId,@OutSideContent)");
            sql.Append(" set @Id=@@IDENTITY");
            SqlParameter[] cmdParams = new SqlParameter[]{
				new SqlParameter("@Id", SqlDbType.Int, 4) { Value = model.Id, Direction = ParameterDirection.Output },
				new SqlParameter("@Title", SqlDbType.VarChar, 200) { Value = model.Title },
				new SqlParameter("@Content", SqlDbType.VarChar, 8000) { Value = model.Content },
				new SqlParameter("@Pic", SqlDbType.VarChar, 200) { Value = model.Pic },
				new SqlParameter("@Creater", SqlDbType.Int, 4) { Value = model.Creater },
				new SqlParameter("@OrganId", SqlDbType.Int, 4) { Value = model.OrganId },
				new SqlParameter("@TraingField", SqlDbType.Int, 4) { Value = model.TraingField },
				new SqlParameter("@TraingCategory", SqlDbType.Int, 4) { Value = model.TraingCategory },
				new SqlParameter("@TraingTopic", SqlDbType.Int, 4) { Value = model.TraingTopic },
				new SqlParameter("@TraningObject", SqlDbType.VarChar, 500) { Value = model.TraningObject },
				new SqlParameter("@Subject", SqlDbType.VarChar, 500) { Value = model.Subject },
				new SqlParameter("@StudyLevel", SqlDbType.VarChar, 500) { Value = model.StudyLevel },
				new SqlParameter("@TotalTime", SqlDbType.Float, 8) { Value = model.TotalTime },
				new SqlParameter("@TrainingForm", SqlDbType.Int, 4) { Value = model.TrainingForm },
				new SqlParameter("@TeacherTitle", SqlDbType.Int, 4) { Value = model.TeacherTitle },
				new SqlParameter("@TeacherName", SqlDbType.VarChar, 20) { Value = model.TeacherName },
				new SqlParameter("@TeacherFrom", SqlDbType.VarChar, 50) { Value = model.TeacherFrom },
				new SqlParameter("@TeacherPic", SqlDbType.VarChar, 500) { Value = model.TeacherPic },
				new SqlParameter("@Outline", SqlDbType.VarChar, 8000) { Value = model.Outline },
				new SqlParameter("@PartitionId", SqlDbType.Int, 4) { Value = model.PartitionId },
				new SqlParameter("@OutSideType", SqlDbType.Int, 4) { Value = model.OutSideType },
				new SqlParameter("@OutSideLink", SqlDbType.VarChar, 500) { Value = model.OutSideLink },
				new SqlParameter("@Range", SqlDbType.Int, 4) { Value = model.Range },
				new SqlParameter("@Status", SqlDbType.Int, 4) { Value = model.Status },
				new SqlParameter("@ApplyRemark", SqlDbType.VarChar, 500) { Value = model.ApplyRemark },
				new SqlParameter("@Display", SqlDbType.Bit, 1) { Value = model.Display },
				new SqlParameter("@Delflag", SqlDbType.Bit, 1) { Value = model.Delflag },
				new SqlParameter("@CreateDate", SqlDbType.DateTime, 8) { Value = model.CreateDate },
				new SqlParameter("@ParentOrganId", SqlDbType.Int, 4) { Value = model.ParentOrganId },
				new SqlParameter("@OutSideContent", SqlDbType.VarChar, -1) { Value = model.OutSideContent }
			};
            int result = Convert.ToInt32(MSEntLibSqlHelper.ExecuteNonQueryBySql(sql.ToString(), cmdParams));
            model.Id = Convert.ToInt32(cmdParams[0].Value);
            return result;
        }

        /// <summary>
        /// 更新一条记录
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public int Update(Traning_Detail model)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("update [dbo].[Traning_Detail] set ");
            sql.Append("[Title]=@Title,[Content]=@Content,[Pic]=@Pic,[Creater]=@Creater,[OrganId]=@OrganId,[TraingField]=@TraingField,[TraingCategory]=@TraingCategory,[TraingTopic]=@TraingTopic,[TraningObject]=@TraningObject,[Subject]=@Subject,[StudyLevel]=@StudyLevel,[TotalTime]=@TotalTime,[TrainingForm]=@TrainingForm,[TeacherTitle]=@TeacherTitle,[TeacherName]=@TeacherName,[TeacherFrom]=@TeacherFrom,[TeacherPic]=@TeacherPic,[Outline]=@Outline,[PartitionId]=@PartitionId,[OutSideType]=@OutSideType,[OutSideLink]=@OutSideLink,[Range]=@Range,[Status]=@Status,[ApplyRemark]=@ApplyRemark,[Display]=@Display,[Delflag]=@Delflag,[CreateDate]=@CreateDate,[ParentOrganId]=@ParentOrganId,[OutSideContent]=@OutSideContent");
            sql.Append(" where [Id]=@Id");
            SqlParameter[] cmdParams = new SqlParameter[] {
				new SqlParameter("@Id", SqlDbType.Int, 4) { Value = model.Id },
				new SqlParameter("@Title", SqlDbType.VarChar, 200) { Value = model.Title },
				new SqlParameter("@Content", SqlDbType.VarChar, 8000) { Value = model.Content },
				new SqlParameter("@Pic", SqlDbType.VarChar, 200) { Value = model.Pic },
				new SqlParameter("@Creater", SqlDbType.Int, 4) { Value = model.Creater },
				new SqlParameter("@OrganId", SqlDbType.Int, 4) { Value = model.OrganId },
				new SqlParameter("@TraingField", SqlDbType.Int, 4) { Value = model.TraingField },
				new SqlParameter("@TraingCategory", SqlDbType.Int, 4) { Value = model.TraingCategory },
				new SqlParameter("@TraingTopic", SqlDbType.Int, 4) { Value = model.TraingTopic },
				new SqlParameter("@TraningObject", SqlDbType.VarChar, 500) { Value = model.TraningObject },
				new SqlParameter("@Subject", SqlDbType.VarChar, 500) { Value = model.Subject },
				new SqlParameter("@StudyLevel", SqlDbType.VarChar, 500) { Value = model.StudyLevel },
				new SqlParameter("@TotalTime", SqlDbType.Float, 8) { Value = model.TotalTime },
				new SqlParameter("@TrainingForm", SqlDbType.Int, 4) { Value = model.TrainingForm },
				new SqlParameter("@TeacherTitle", SqlDbType.Int, 4) { Value = model.TeacherTitle },
				new SqlParameter("@TeacherName", SqlDbType.VarChar, 20) { Value = model.TeacherName },
				new SqlParameter("@TeacherFrom", SqlDbType.VarChar, 50) { Value = model.TeacherFrom },
				new SqlParameter("@TeacherPic", SqlDbType.VarChar, 500) { Value = model.TeacherPic },
				new SqlParameter("@Outline", SqlDbType.VarChar, 8000) { Value = model.Outline },
				new SqlParameter("@PartitionId", SqlDbType.Int, 4) { Value = model.PartitionId },
				new SqlParameter("@OutSideType", SqlDbType.Int, 4) { Value = model.OutSideType },
				new SqlParameter("@OutSideLink", SqlDbType.VarChar, 500) { Value = model.OutSideLink },
				new SqlParameter("@Range", SqlDbType.Int, 4) { Value = model.Range },
				new SqlParameter("@Status", SqlDbType.Int, 4) { Value = model.Status },
				new SqlParameter("@ApplyRemark", SqlDbType.VarChar, 500) { Value = model.ApplyRemark },
				new SqlParameter("@Display", SqlDbType.Bit, 1) { Value = model.Display },
				new SqlParameter("@Delflag", SqlDbType.Bit, 1) { Value = model.Delflag },
				new SqlParameter("@CreateDate", SqlDbType.DateTime, 8) { Value = model.CreateDate },
				new SqlParameter("@ParentOrganId", SqlDbType.Int, 4) { Value = model.ParentOrganId },
				new SqlParameter("@OutSideContent", SqlDbType.VarChar, -1) { Value = model.OutSideContent }
			};
            return MSEntLibSqlHelper.ExecuteNonQueryBySql(sql.ToString(), cmdParams);
        }

		/// <summary>
		/// 取得一条记录
		/// </summary>
		/// <param name="id"></param>
		/// <param name="where"></param>
		/// <returns></returns>
		public Traning_Detail GetModel(int id, string where)
		{
			string sql = "select * from [dbo].[Traning_Detail] where [Id]=@Id";
			if (!string.IsNullOrEmpty(where))
				sql += " and " + where;
			SqlParameter[] cmdParams = new SqlParameter[]{
				new SqlParameter("@Id", SqlDbType.Int, 4) { Value = id }
			};
			using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql, cmdParams))
			{
				if (reader.Read())
				{
					Traning_Detail model = new Traning_Detail();
					ConvertToModel(reader, model);
					return model;
				}
				else
				{
					return null;
				}
			}
		}

        /// <summary>
        /// 取得记录数
        /// </summary>
        /// <param name="where"></param>
        /// <returns></returns>
        public int GetCount(string where)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("select count(1) from [dbo].[Traning_Detail]");
            if (!string.IsNullOrEmpty(where))
                sql.Append(" where " + where);
            return Convert.ToInt32(MSEntLibSqlHelper.ExecuteScalarBySql(sql.ToString()));
        }


		/// <summary>
		/// 获取数据集
		/// </summary>
		/// <param name="where"></param>
		/// <param name="orderBy"></param>
		/// <returns></returns>
		public List<Traning_Detail> GetList(string where, string orderBy)
		{
			StringBuilder sql = new StringBuilder();
			sql.Append("select * from [dbo].[Traning_Detail]");
			if (!string.IsNullOrEmpty(where))
				sql.Append(" where " + where);
			if (!string.IsNullOrEmpty(orderBy))
				sql.Append(" order by " + orderBy);
			List<Traning_Detail> list = new List<Traning_Detail>();
			using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql.ToString()))
			{
				while (reader.Read())
				{
					Traning_Detail model = new Traning_Detail();
					ConvertToModel(reader, model);
					list.Add(model);
				}
			}
			return list;
		}


        /// <summary>
        /// 获取分页数据集
        /// </summary>
        /// <param name="pageSize"></param>
        /// <param name="pageIndex"></param>
        /// <param name="where"></param>
        /// <param name="orderBy"></param>
        /// <returns></returns>
        public List<Traning_Detail> GetList(int pageSize, int pageIndex, string where, string orderBy)
        {
            if (string.IsNullOrEmpty(orderBy))
                throw new ArgumentNullException();
            int start = (pageIndex - 1) * pageSize + 1;
            int end = pageIndex * pageSize;
            StringBuilder sql = new StringBuilder();
            sql.Append("select * from (select *,ROW_NUMBER() over (order by " + orderBy + ") as [RowNum] from [dbo].[Traning_Detail]");
            if (!string.IsNullOrEmpty(where))
                sql.Append(" where " + where);
            sql.Append(") as T where [RowNum] between " + start + " and " + end);
            List<Traning_Detail> list = new List<Traning_Detail>();
            using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql.ToString()))
            {
                while (reader.Read())
                {
                    Traning_Detail model = new Traning_Detail();
                    ConvertToModel(reader, model);
                    list.Add(model);
                }
            }
            return list;
        }

		/// <summary>
		/// 获取分页数据集
		/// </summary>
		/// <param name="pageSize"></param>
		/// <param name="pageIndex"></param>
		/// <param name="where"></param>
		/// <param name="orderBy"></param>
		/// <param name="recordCount"></param>
		/// <returns></returns>
		public List<Traning_Detail> GetList(int pageSize, int pageIndex, string where, string orderBy, out int recordCount)
		{
			if (string.IsNullOrEmpty(orderBy))
				throw new ArgumentNullException();
			StringBuilder sb = new StringBuilder();
			sb.Append("select count(1) from [dbo].[Traning_Detail]");
			if (!string.IsNullOrEmpty(where))
				sb.Append(" where " + where);
			recordCount = Convert.ToInt32(MSEntLibSqlHelper.ExecuteScalarBySql(sb.ToString()));
			int start = (pageIndex - 1) * pageSize + 1;
			int end = pageIndex * pageSize;
			StringBuilder sql = new StringBuilder();
			sql.Append("select * from (select *,ROW_NUMBER() over (order by " + orderBy + ") as [RowNum] from [dbo].[Traning_Detail]");
			if (!string.IsNullOrEmpty(where))
				sql.Append(" where " + where);
			sql.Append(") as T where [RowNum] between " + start + " and " + end);
			List<Traning_Detail> list = new List<Traning_Detail>();
			using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql.ToString()))
			{
				while (reader.Read())
				{
					Traning_Detail model = new Traning_Detail();
					ConvertToModel(reader, model);
					list.Add(model);
				}
			}
			return list;
		}
        

        public List<Traning_Detail> GetListHasClass(int pageSize, int pageIndex, string where, string orderBy, out int recordCount)
        {
            if (string.IsNullOrEmpty(orderBy))
                throw new ArgumentNullException();
            StringBuilder s = new StringBuilder();
            s.Append(" (select distinct td.* from traning_detail td left join class_detail cd on td.Id=cd.TraningId ");
            s.Append(" left join Class_StudySection css on cd.Id=css.ClassId  ");
            s.Append(" left join Class_TeachSubject cts on cd.Id=cts.ClassId  ");
            s.Append(" left join Class_TeachGrade ctg on cd.Id=ctg.ClassId  ");

            s.Append(" where td.delflag=0 and td.display=1  and td.Status=5 ");
            if (!string.IsNullOrEmpty(where))
                s.Append(where);
            s.Append(" and cd.delflag=0 and cd.display=1 and cd.Status in(3,4)) as tc ");
            StringBuilder sb = new StringBuilder();
            sb.Append("select COUNT(1) from  ");
            sb.Append(s.ToString());

            recordCount = Convert.ToInt32(MSEntLibSqlHelper.ExecuteScalarBySql(sb.ToString()));
            int start = (pageIndex - 1) * pageSize + 1;
            int end = pageIndex * pageSize;
            StringBuilder sql = new StringBuilder();
            sql.Append("select * from (select *,ROW_NUMBER() over (order by " + orderBy + ") as [RowNum] from " + s);

            sql.Append(") as T where [RowNum] between " + start + " and " + end);
            List<Traning_Detail> list = new List<Traning_Detail>();
            using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql.ToString()))
            {
                while (reader.Read())
                {
                    Traning_Detail model = new Traning_Detail();
                    ConvertToModel(reader, model);
                    list.Add(model);
                }
            }
            return list;
        }


		/// <summary>
		/// 获取DataTable
		/// </summary>
		/// <param name="where"></param>
		/// <param name="orderBy"></param>
		/// <returns></returns>
		public DataTable GetTable(string where, string orderBy)
		{
			StringBuilder sql = new StringBuilder();
            sql.Append("select [Id],[Title],[Content],[Pic],[Creater],[OrganId],[TraingField],[TraingCategory],[TraingTopic],[TraningObject],[Subject],[StudyLevel],[TotalTime],[TrainingForm],[TeacherTitle],[TeacherName],[TeacherFrom],[TeacherPic],[Outline],[PartitionId],[OutSideType],[OutSideLink],[Range],[Status],[ApplyRemark],[Display],[Delflag],[CreateDate],[ParentOrganId],[OutSideContent] from [dbo].[Traning_Detail]");
			if (!string.IsNullOrEmpty(where))
				sql.Append(" where " + where);
			if (!string.IsNullOrEmpty(orderBy))
				sql.Append(" order by " + orderBy);
			return MSEntLibSqlHelper.ExecuteDataSetBySql(sql.ToString()).Tables[0];
		}

        /// <summary>
        /// 获取分页DataTable
        /// </summary>
        /// <param name="pageSize"></param>
        /// <param name="pageIndex"></param>
        /// <param name="where"></param>
        /// <param name="orderBy"></param>
        /// <returns></returns>
        public DataTable GetTable(int pageSize, int pageIndex, string where, string orderBy)
        {
            if (string.IsNullOrEmpty(orderBy))
                throw new ArgumentNullException();
            int start = (pageIndex - 1) * pageSize + 1;
            int end = pageIndex * pageSize;
            StringBuilder sql = new StringBuilder();
            sql.Append("select * from (select [Id],[Title],[Content],[Pic],[Creater],[OrganId],[TraingField],[TraingCategory],[TraingTopic],[TraningObject],[Subject],[StudyLevel],[TotalTime],[TrainingForm],[TeacherTitle],[TeacherName],[TeacherFrom],[TeacherPic],[Outline],[PartitionId],[OutSideType],[OutSideLink],[Range],[Status],[ApplyRemark],[Display],[Delflag],[CreateDate],[ParentOrganId],[OutSideContent],ROW_NUMBER() over (order by " + orderBy + ") as [RowNum] from [dbo].[Traning_Detail]");
            if (!string.IsNullOrEmpty(where))
                sql.Append(" where " + where);
            sql.Append(") as T where [RowNum] between " + start + " and " + end);
            return MSEntLibSqlHelper.ExecuteDataSetBySql(sql.ToString()).Tables[0];
        }

		/// <summary>
		/// 获取分页DataTable
		/// </summary>
		/// <param name="pageSize"></param>
		/// <param name="pageIndex"></param>
		/// <param name="where"></param>
		/// <param name="orderBy"></param>
		/// <param name="recordCount"></param>
		/// <returns></returns>
		public DataTable GetTable(int pageSize, int pageIndex, string where, string orderBy, out int recordCount)
		{
			if (string.IsNullOrEmpty(orderBy))
				throw new ArgumentNullException();
			StringBuilder sb = new StringBuilder();
			sb.Append("select count(1) from [dbo].[Traning_Detail]");
			if (!string.IsNullOrEmpty(where))
				sb.Append(" where " + where);
			recordCount = Convert.ToInt32(MSEntLibSqlHelper.ExecuteScalarBySql(sb.ToString()));
			int start = (pageIndex - 1) * pageSize + 1;
			int end = pageIndex * pageSize;
			StringBuilder sql = new StringBuilder();
            sql.Append("select * from (select [Id],[Title],[Content],[Pic],[Creater],[OrganId],[TraingField],[TraingCategory],[TraingTopic],[TraningObject],[Subject],[StudyLevel],[TotalTime],[TrainingForm],[TeacherTitle],[TeacherName],[TeacherFrom],[TeacherPic],[Outline],[PartitionId],[OutSideType],[OutSideLink],[Range],[Status],[ApplyRemark],[Display],[Delflag],[CreateDate],[ParentOrganId],[OutSideContent],ROW_NUMBER() over (order by " + orderBy + ") as [RowNum] from [dbo].[Traning_Detail]");
			if (!string.IsNullOrEmpty(where))
				sql.Append(" where " + where);
			sql.Append(") as T where [RowNum] between " + start + " and " + end);
			return MSEntLibSqlHelper.ExecuteDataSetBySql(sql.ToString()).Tables[0];
		}

		private void ConvertToModel(IDataReader reader, Traning_Detail model)
		{
			if (reader["Id"] != DBNull.Value)
				model.Id = Convert.ToInt32(reader["Id"]);
			if (reader["Title"] != DBNull.Value)
				model.Title = reader["Title"].ToString();
			if (reader["Content"] != DBNull.Value)
				model.Content = reader["Content"].ToString();
			if (reader["Pic"] != DBNull.Value)
				model.Pic = reader["Pic"].ToString();
			if (reader["Creater"] != DBNull.Value)
				model.Creater = Convert.ToInt32(reader["Creater"]);
			if (reader["OrganId"] != DBNull.Value)
				model.OrganId = Convert.ToInt32(reader["OrganId"]);
			if (reader["TraingField"] != DBNull.Value)
				model.TraingField = Convert.ToInt32(reader["TraingField"]);
			if (reader["TraingCategory"] != DBNull.Value)
				model.TraingCategory = Convert.ToInt32(reader["TraingCategory"]);
			if (reader["TraingTopic"] != DBNull.Value)
				model.TraingTopic = Convert.ToInt32(reader["TraingTopic"]);
			if (reader["TraningObject"] != DBNull.Value)
				model.TraningObject = reader["TraningObject"].ToString();
			if (reader["Subject"] != DBNull.Value)
				model.Subject = reader["Subject"].ToString();
			if (reader["StudyLevel"] != DBNull.Value)
				model.StudyLevel = reader["StudyLevel"].ToString();
			if (reader["TotalTime"] != DBNull.Value)
				model.TotalTime = Convert.ToDouble(reader["TotalTime"]);
			if (reader["TrainingForm"] != DBNull.Value)
				model.TrainingForm = Convert.ToInt32(reader["TrainingForm"]);
			if (reader["TeacherTitle"] != DBNull.Value)
				model.TeacherTitle = Convert.ToInt32(reader["TeacherTitle"]);
			if (reader["TeacherName"] != DBNull.Value)
				model.TeacherName = reader["TeacherName"].ToString();
			if (reader["TeacherFrom"] != DBNull.Value)
				model.TeacherFrom = reader["TeacherFrom"].ToString();
			if (reader["TeacherPic"] != DBNull.Value)
				model.TeacherPic = reader["TeacherPic"].ToString();
			if (reader["Outline"] != DBNull.Value)
				model.Outline = reader["Outline"].ToString();
			if (reader["PartitionId"] != DBNull.Value)
				model.PartitionId = Convert.ToInt32(reader["PartitionId"]);
			if (reader["OutSideType"] != DBNull.Value)
				model.OutSideType = Convert.ToInt32(reader["OutSideType"]);
			if (reader["OutSideLink"] != DBNull.Value)
				model.OutSideLink = reader["OutSideLink"].ToString();
			if (reader["Range"] != DBNull.Value)
				model.Range = Convert.ToInt32(reader["Range"]);
			if (reader["Status"] != DBNull.Value)
				model.Status = Convert.ToInt32(reader["Status"]);
			if (reader["ApplyRemark"] != DBNull.Value)
				model.ApplyRemark = reader["ApplyRemark"].ToString();
			if (reader["Display"] != DBNull.Value)
				model.Display = Convert.ToBoolean(reader["Display"]);
			if (reader["Delflag"] != DBNull.Value)
				model.Delflag = Convert.ToBoolean(reader["Delflag"]);
			if (reader["CreateDate"] != DBNull.Value)
				model.CreateDate = Convert.ToDateTime(reader["CreateDate"]);
			if (reader["ParentOrganId"] != DBNull.Value)
				model.ParentOrganId = Convert.ToInt32(reader["ParentOrganId"]);
            if (reader["OutSideContent"] != DBNull.Value)
                model.OutSideContent = reader["OutSideContent"].ToString();
		}

       

	}
}

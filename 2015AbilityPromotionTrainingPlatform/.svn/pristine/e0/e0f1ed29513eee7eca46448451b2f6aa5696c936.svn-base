using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Script.Serialization;
using System.Configuration;

namespace WCS.Code
{
    public class FileHelper
    {
        //private string _AccessKey = string.Empty;// LocalResource.AccessKey;// "bd433cf654c49f05672fc2b7d341c85d13527002";
        //private string _SecretKey = string.Empty;// LocalResource.SecretKey;// "ffc80769487bf07d8d333c74e5ffb73d4ee6f583";
        //private string _ApiUrl = string.Empty;// "http://up.wcsapi.biz.matocloud.com:8090/file/upload";
        private string _prefix = string.Empty;
        Encoding encode = Encoding.UTF8;

        private string _AccessKey = ConfigurationManager.AppSettings["AccessKey"];
        private string _SecretKey = ConfigurationManager.AppSettings["SecretKey"];
        private string _ApiUrl = ConfigurationManager.AppSettings["ApiUrl"];
        private string _Bucket = ConfigurationManager.AppSettings["Bucket"];
        private string _Prefix = ConfigurationManager.AppSettings["Prefix"];

        JavaScriptSerializer json_serializer = new JavaScriptSerializer();

        //public FileHelper(string AccessKey, string SecretKey, string ApiUrl, string prefix)
        //{
        //    _AccessKey = AccessKey;
        //    _SecretKey = SecretKey;
        //    _ApiUrl = ApiUrl;
        //    _prefix = prefix;
        //}

        public bool UploadFile(string fileName, string fileNamePath, Model.UploaddToken putPolicy, out Exception ex)
        {
            //string serputPolicy = "{\"scope\":\"shlll\",\"deadline\":\"1439293232413\",\"overwrite\":0,\"fsizeLimit\":1073741824,\"instant\":0}";

            string serputPolicy = "{\"scope\":\"" + putPolicy.scope + "\",\"deadline\":\"" + putPolicy.deadline + "\",\"overwrite\":1}";
            // string serputPolicy = json_serializer.Serialize(putPolicy);
            string encodedPutPolicy = Convert.ToBase64String(encode.GetBytes(serputPolicy));
            //string Sign = Code.Security.HmacSha1Sign(encodedPutPolicy, SecretKey);
            //string encodedSign = Convert.ToBase64String(encode.GetBytes(Sign));
            string encodedSign = Security.HmacSha1Sign(encodedPutPolicy, _SecretKey);
            string uploadToken = _AccessKey + ':' + encodedSign + ':' + encodedPutPolicy;

            NameValueCollection parms = new NameValueCollection();
            parms.Add("key", _prefix + fileName.Trim());
            parms.Add("token", uploadToken);

            try
            {
                string rst = HttpPostData(_ApiUrl, 1200000, "file", fileName, fileNamePath, parms);
            }
            catch (Exception e)
            {
                ex = e;
                return false;
            }
            ex = null;
            return true;
        }

        public bool UploadFile(string fileName, Stream file, out Exception ex, out string link)
        {
            bool _issuccess = false;
            string _link = string.Empty;
            Model.UploaddToken putPolicy = new Model.UploaddToken();
            putPolicy.scope = _Bucket;
            putPolicy.returnBody = "link=$(url)";
            DateTime _stamp = DateTime.Now.AddMinutes(15);
            putPolicy.deadline = Convert.ToInt32(DateTimeHelper.ConvertToTimestamp(_stamp)).ToString() + "000";

            string serputPolicy = "{\"scope\":\"" + putPolicy.scope + "\",\"deadline\":\"" + putPolicy.deadline + "\",\"overwrite\":1,\"returnBody\":\"" + putPolicy.returnBody + "\"}";

            string encodedPutPolicy = Convert.ToBase64String(encode.GetBytes(serputPolicy));

            string encodedSign = Security.HmacSha1Sign(encodedPutPolicy, _SecretKey);
            string uploadToken = _AccessKey + ':' + encodedSign + ':' + encodedPutPolicy;

            NameValueCollection parms = new NameValueCollection();
            parms.Add("key", _prefix + fileName.Trim());
            parms.Add("token", uploadToken);

            ex = null;
            try
            {
                string rst = HttpPostData(_ApiUrl, 1200000, "file", fileName, file, parms);

                List<string> r = rst.Split(new string[] { "&" }, StringSplitOptions.RemoveEmptyEntries).ToList();

                _link = r.Where(p => p.StartsWith("link=")).SingleOrDefault();

                _issuccess = true;
            }
            catch (Exception e)
            {
                ex = e;
                _issuccess = false;
            }

            if (!string.IsNullOrEmpty(_link))
            {
                _link = _link.Substring(_link.IndexOf("=") + 1);
            }
            link = _link;
            return _issuccess;
        }

        private string HttpPostData(string url, int timeOut, string fileKeyName, string fileName, string filePath, NameValueCollection stringDict)
        {
            string responseContent;
            var memStream = new MemoryStream();
            var webRequest = (HttpWebRequest)WebRequest.Create(url);
            // 边界符
            var boundary = "---------------" + DateTime.Now.Ticks.ToString("x");
            // 边界符
            var beginBoundary = Encoding.ASCII.GetBytes("--" + boundary + "\r\n");
            var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read);
            FileInfo fi = new FileInfo(filePath);
            //var filetype=fi
            // 最后的结束符
            var endBoundary = Encoding.ASCII.GetBytes("--" + boundary + "--\r\n");

            // 设置属性
            webRequest.Method = "POST";
            webRequest.Timeout = timeOut;
            webRequest.ContentType = "multipart/form-data; boundary=" + boundary;

            // 写入文件
            const string filePartHeader =
                "Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"\r\n" +
                 "Content-Type: application/octet-stream\r\n\r\n";
            var header = string.Format(filePartHeader, fileKeyName, fileName);
            var headerbytes = Encoding.UTF8.GetBytes(header);

            memStream.Write(beginBoundary, 0, beginBoundary.Length);
            memStream.Write(headerbytes, 0, headerbytes.Length);

            var buffer = new byte[1024];
            int bytesRead; // =0

            while ((bytesRead = fileStream.Read(buffer, 0, buffer.Length)) != 0)
            {
                memStream.Write(buffer, 0, bytesRead);
            }

            // 写入字符串的Key
            var stringKeyHeader = //Environment.NewLine +
                                  "--" + boundary +
                                  Environment.NewLine + "Content-Disposition: form-data; name=\"{0}\"" +
                                  Environment.NewLine +
                                  Environment.NewLine +
                                  "{1}" + Environment.NewLine;

            string a = string.Format(stringKeyHeader, "key", stringDict["key"]);

            var newline = Encoding.UTF8.GetBytes(Environment.NewLine);
            memStream.Write(newline, 0, newline.Length);

            foreach (byte[] formitembytes in from string key in stringDict.Keys
                                             select string.Format(stringKeyHeader, key, stringDict[key])
                                                 into formitem
                                                 select Encoding.UTF8.GetBytes(formitem))
            {
                memStream.Write(formitembytes, 0, formitembytes.Length);
            }

            // 写入最后的结束边界符
            memStream.Write(endBoundary, 0, endBoundary.Length);

            webRequest.ContentLength = memStream.Length;

            var requestStream = webRequest.GetRequestStream();

            memStream.Position = 0;
            var tempBuffer = new byte[memStream.Length];
            memStream.Read(tempBuffer, 0, tempBuffer.Length);
            memStream.Close();

            requestStream.Write(tempBuffer, 0, tempBuffer.Length);
            requestStream.Close();

            var httpWebResponse = (HttpWebResponse)webRequest.GetResponse();

            using (var httpStreamReader = new StreamReader(httpWebResponse.GetResponseStream(),
                                                            Encoding.GetEncoding("utf-8")))
            {
                responseContent = httpStreamReader.ReadToEnd();
            }

            fileStream.Close();
            httpWebResponse.Close();
            webRequest.Abort();

            return responseContent;
        }

        private string HttpPostData(string url, int timeOut, string fileKeyName, string fileName, Stream file, NameValueCollection stringDict)
        {
            string responseContent;
            var memStream = new MemoryStream();
            //HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);
            HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create(url);
            // 边界符
            var boundary = "---------------" + DateTime.Now.Ticks.ToString("x");
            // 边界符
            var beginBoundary = Encoding.ASCII.GetBytes("--" + boundary + "\r\n");
            //var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read);
            var fileStream = file;

            //FileInfo fi = new FileInfo(filePath);
            //var filetype=fi
            // 最后的结束符
            var endBoundary = Encoding.ASCII.GetBytes("--" + boundary + "--\r\n");

            // 设置属性
            webRequest.Method = "POST";
            webRequest.Timeout = timeOut;
            webRequest.ContentType = "multipart/form-data; boundary=" + boundary;

            // 写入文件
            const string filePartHeader =
                "Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"\r\n" +
                 "Content-Type: application/octet-stream\r\n\r\n";
            var header = string.Format(filePartHeader, fileKeyName, fileName);
            var headerbytes = Encoding.UTF8.GetBytes(header);

            memStream.Write(beginBoundary, 0, beginBoundary.Length);
            memStream.Write(headerbytes, 0, headerbytes.Length);

            //var buffer = new byte[1024];
            //int bytesRead; // =0


            var mStreamer = new MemoryStream();
            mStreamer.SetLength(fileStream.Length);
            fileStream.Read(mStreamer.GetBuffer(), 0, (int)fileStream.Length);
            mStreamer.Seek(0, SeekOrigin.Begin);
            byte[] fileBytes = mStreamer.GetBuffer();

            //while ((bytesRead = new StreamReader(fileStream).Read(buffer, 0, buffer.Length)) != 0)
            //{

            //    memStream.Write(encode.GetBytes(buffer), 0, bytesRead);
            //}

            memStream.Write(fileBytes, 0, fileBytes.Length);

            // 写入字符串的Key
            var stringKeyHeader = //Environment.NewLine +
                                  "--" + boundary +
                                  Environment.NewLine + "Content-Disposition: form-data; name=\"{0}\"" +
                                  Environment.NewLine +
                                  Environment.NewLine +
                                  "{1}" + Environment.NewLine;

            string a = string.Format(stringKeyHeader, "key", stringDict["key"]);

            var newline = Encoding.UTF8.GetBytes(Environment.NewLine);
            memStream.Write(newline, 0, newline.Length);

            foreach (byte[] formitembytes in from string key in stringDict.Keys
                                             select string.Format(stringKeyHeader, key, stringDict[key])
                                                 into formitem
                                                 select Encoding.UTF8.GetBytes(formitem))
            {

                memStream.Write(formitembytes, 0, formitembytes.Length);
            }

            // 写入最后的结束边界符
            memStream.Write(endBoundary, 0, endBoundary.Length);

            webRequest.ContentLength = memStream.Length;

            var requestStream = webRequest.GetRequestStream();

            memStream.Position = 0;
            var tempBuffer = new byte[memStream.Length];
            memStream.Read(tempBuffer, 0, tempBuffer.Length);
            memStream.Close();

            requestStream.Write(tempBuffer, 0, tempBuffer.Length);
            requestStream.Close();

            //  var httpWebResponse= (HttpWebResponse)webRequest.GetResponse();
            HttpWebResponse response;

            try
            {
                response = (HttpWebResponse)webRequest.GetResponse();
            }
            catch (WebException ex)
            {
                response = ex.Response as HttpWebResponse;
            }

            var httpWebResponse = response;

            using (var httpStreamReader = new StreamReader(httpWebResponse.GetResponseStream(),
                                                            Encoding.GetEncoding("utf-8")))
            {
                responseContent = httpStreamReader.ReadToEnd();
            }

            //fileStream.Close();
            httpWebResponse.Close();
            webRequest.Abort();

            return DecodeBase64("utf-8", responseContent);
        }

        string DecodeBase64(string code_type, string code)
        {
            string decode = "";
            byte[] bytes = Convert.FromBase64String(code);
            try
            {
                decode = Encoding.GetEncoding(code_type).GetString(bytes);
            }
            catch
            {
                decode = code;
            }
            return decode;
        }
    }
}

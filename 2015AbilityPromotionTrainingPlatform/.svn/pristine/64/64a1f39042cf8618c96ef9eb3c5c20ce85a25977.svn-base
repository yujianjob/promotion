using Dianda.AP.Model;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;

namespace Dianda.AP.DAL
{
    public class Training_CreditsDAL
    {
        /// <summary>
        /// 取得一条记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="where"></param>
        /// <returns></returns>
        public Training_Credits GetModel(int id, string where)
        {
            string sql = "select * from [dbo].[Training_Credits] where Id=@Id";
            if (!string.IsNullOrEmpty(where))
                sql += " and " + where;
            SqlParameter[] cmdParams = new SqlParameter[]{
				new SqlParameter("@Id", SqlDbType.Int, 4) { Value = id }
			};
            using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql, cmdParams))
            {
                if (reader.Read())
                {
                    Training_Credits model = new Training_Credits();
                    ConvertToModel(reader, model);
                    return model;
                }
                else
                {
                    return null;
                }
            }
        }

        /// <summary>
        /// 新增一条记录
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public int Add(Training_Credits model)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("insert into [dbo].[Training_Credits] ([PlanId],[TraningField],[Level],[MinValue],[MaxValue],[Sort],[Delflag],[CreateDate])");
            sql.Append(" values (@PlanId,@TraningField,@Level,@MinValue,@MaxValue,@Sort,@Delflag,@CreateDate)");
            sql.Append(" set @Id=@@IDENTITY");
            SqlParameter[] cmdParams = new SqlParameter[]{
				new SqlParameter("@Id", SqlDbType.Int, 4) { Value = model.Id, Direction = ParameterDirection.Output },
				new SqlParameter("@PlanId", SqlDbType.Int, 4) { Value = model.PlanId },
				new SqlParameter("@TraningField", SqlDbType.Int, 4) { Value = model.TraningField },
				new SqlParameter("@Level", SqlDbType.Int, 4) { Value = model.Level },
				new SqlParameter("@MinValue", SqlDbType.Float, 8) { Value = model.MinValue },
				new SqlParameter("@MaxValue", SqlDbType.Float, 8) { Value = model.MaxValue },
				new SqlParameter("@Sort", SqlDbType.Int, 4) { Value = model.Sort },
				new SqlParameter("@Delflag", SqlDbType.Bit, 1) { Value = model.Delflag },
				new SqlParameter("@CreateDate", SqlDbType.DateTime, 8) { Value = model.CreateDate }
			};
            int result = Convert.ToInt32(MSEntLibSqlHelper.ExecuteNonQueryBySql(sql.ToString(), cmdParams));
            model.Id = Convert.ToInt32(cmdParams[0].Value);
            return result;
        }

        /// <summary>
        /// 更新一条记录
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public int Update(Training_Credits model)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("update [dbo].[Training_Credits] set ");
            sql.Append("[PlanId]=@PlanId,[TraningField]=@TraningField,[Level]=@Level,[MinValue]=@MinValue,[MaxValue]=@MaxValue,[Sort]=@Sort,[Delflag]=@Delflag,[CreateDate]=@CreateDate");
            sql.Append(" where [Id]=@Id");
            SqlParameter[] cmdParams = new SqlParameter[] {
				new SqlParameter("@Id", SqlDbType.Int, 4) { Value = model.Id },
				new SqlParameter("@PlanId", SqlDbType.Int, 4) { Value = model.PlanId },
				new SqlParameter("@TraningField", SqlDbType.Int, 4) { Value = model.TraningField },
				new SqlParameter("@Level", SqlDbType.Int, 4) { Value = model.Level },
				new SqlParameter("@MinValue", SqlDbType.Float, 8) { Value = model.MinValue },
				new SqlParameter("@MaxValue", SqlDbType.Float, 8) { Value = model.MaxValue },
				new SqlParameter("@Sort", SqlDbType.Int, 4) { Value = model.Sort },
				new SqlParameter("@Delflag", SqlDbType.Bit, 1) { Value = model.Delflag },
				new SqlParameter("@CreateDate", SqlDbType.DateTime, 8) { Value = model.CreateDate }
			};
            return MSEntLibSqlHelper.ExecuteNonQueryBySql(sql.ToString(), cmdParams);
        }

        /// <summary>
        /// 获取数据集
        /// </summary>
        /// <param name="where"></param>
        /// <param name="orderBy"></param>
        /// <returns></returns>
        public DataTable GetList(string where, string orderBy)
        {
            DataTable dt = new DataTable();
            StringBuilder sql = new StringBuilder();
            sql.Append("select a.Id,b.Title as PlanTitle,c.Title as TraningFieTitle,a.Level,a.MinValue,a.MaxValue,a.Sort,a.TraningField ");
            sql.Append(" from Training_Credits a left join Training_Plan b on a.PlanId = b.Id ");
            sql.Append(" left join Traning_Field c on a.TraningField=c.Id where a.TraningField <> -1 and a.Delflag = 'false' ");
            if (!string.IsNullOrEmpty(where))
            {
                sql.Append(where);
            }
            if (!string.IsNullOrEmpty(orderBy))
                sql.Append(" order by " + orderBy);
            dt = MSEntLibSqlHelper.ExecuteDataSetBySql(sql.ToString()).Tables[0];
            return dt;
        }

        public DataTable GetFieCount()
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(" select Title,Id from dbo.Traning_Field ");
            return MSEntLibSqlHelper.ExecuteDataSetBySql(sql.ToString()).Tables[0];
        }

        /// <summary>
        /// 获取分页数据集
        /// </summary>
        /// <param name="pageSize"></param>
        /// <param name="pageIndex"></param>
        /// <param name="where"></param>
        /// <param name="orderBy"></param>
        /// <param name="recordCount"></param>
        /// <returns></returns>
        public List<Training_Credits> GetList(int pageSize, int pageIndex, string where, string orderBy, out int recordCount)
        {
            if (string.IsNullOrEmpty(orderBy))
                throw new ArgumentNullException();
            StringBuilder sb = new StringBuilder();
            sb.Append("select count(1) from [dbo].[Training_Credits]");
            if (!string.IsNullOrEmpty(where))
                sb.Append(" where " + where);
            recordCount = Convert.ToInt32(MSEntLibSqlHelper.ExecuteScalarBySql(sb.ToString()));
            int start = (pageIndex - 1) * pageSize + 1;
            int end = pageIndex * pageSize;
            StringBuilder sql = new StringBuilder();
            sql.Append("select * from (select *,ROW_NUMBER() over (order by " + orderBy + ") as RowNum from [dbo].[Training_Credits]");
            if (!string.IsNullOrEmpty(where))
                sql.Append(" where " + where);
            sql.Append(") as T where RowNum between " + start + " and " + end);
            List<Training_Credits> list = new List<Training_Credits>();
            using (IDataReader reader = MSEntLibSqlHelper.ExecuteDataReaderBySql(sql.ToString()))
            {
                while (reader.Read())
                {
                    Training_Credits model = new Training_Credits();
                    ConvertToModel(reader, model);
                    list.Add(model);
                }
            }
            return list;
        }


        public DataTable GetAvgCredits(int Id)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(" select id,MinValue from Training_Credits where TraningField = -1 and OrganId = " + Id + " ");
            return MSEntLibSqlHelper.ExecuteDataSetBySql(sql.ToString()).Tables[0];
        }


        public int UpdCredits(string Value)
        {
            int k = 0;
            string[] Array = Value.Split(';');
            for (int i = 0; i < Array.Length; i++)
            {
                string[] list = Array[i].Split(',');
                StringBuilder sql = new StringBuilder();
                sql.Append(" update Training_Credits set MinValue='" + list[1] + "',MaxValue='" + list[2] + "' where id='" + list[0] + "' ");
                k += MSEntLibSqlHelper.ExecuteNonQueryBySql(sql.ToString());
            }

            return k;
        }

        public int AddCredits(string Value,int OrganId,int PlanId)
        {
            int k = 0;
            string[] Array = Value.Split(';');
            for (int i = 0; i < Array.Length; i++)
            {
                if (i != Array.Length - 1)
                {
                    string[] list = Array[i].Split(',');
                    StringBuilder sql = new StringBuilder();
                    sql.Append(" insert into Training_Credits (PlanId,TraningField,Level,MinValue,MaxValue,Sort,Delflag,CreateDate,OrganId) values ('" + PlanId + "','" + list[1] + "','" + list[0] + "','" + list[2] + "','" + list[3] + "','" + DateTime.Now.ToString("HHmmssfff") + "','false','" + DateTime.Now + "','" + OrganId + "') ");
                    k += MSEntLibSqlHelper.ExecuteNonQueryBySql(sql.ToString());
                }
                else
                {
                    string[] list = Array[i].Split(',');
                    StringBuilder sql = new StringBuilder();
                    sql.Append(" insert into Training_Credits (PlanId,TraningField,Level,MinValue,MaxValue,Sort,Delflag,CreateDate,OrganId) values ('" + PlanId + "','-1','" + list[0] + "','" + list[2] + "','" + list[3] + "','" + DateTime.Now.ToString("HHmmssfff") + "','false','" + DateTime.Now + "','" + OrganId + "') ");
                    k += MSEntLibSqlHelper.ExecuteNonQueryBySql(sql.ToString());
                }
            }

            return k;
        }

        public DataTable GetOrgan(int id,int PlanId)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(" select TraningField,MinValue,MaxValue from Training_Credits where PlanId = '"+PlanId+"' and OrganId in ( ");
            sql.Append(" select ParentId from Organ_Detail where Id = " + id + ") ");
            return MSEntLibSqlHelper.ExecuteDataSetBySql(sql.ToString()).Tables[0];
        }


        public bool YzAddCredits(int OrganId, int PlanId)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(" select count(1) from Training_Credits where OrganId = '" + OrganId + "' and PlanId = '" + PlanId + "' ");
            int count = Convert.ToInt32(MSEntLibSqlHelper.ExecuteScalarBySql(sql.ToString()));
            if (count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private void ConvertToModel(IDataReader reader, Training_Credits model)
        {
            if (reader["Id"] != DBNull.Value)
                model.Id = Convert.ToInt32(reader["Id"]);

            if (reader["PlanId"] != DBNull.Value)
                model.PlanId = Convert.ToInt32(reader["PlanId"]);

            if (reader["TraningField"] != DBNull.Value)
                model.TraningField = Convert.ToInt32(reader["TraningField"]);

            if (reader["Level"] != DBNull.Value)
                model.Level = Convert.ToInt32(reader["Level"]);

            if (reader["MinValue"] != DBNull.Value)
                model.MinValue = Convert.ToDouble(reader["MinValue"]);

            if (reader["MaxValue"] != DBNull.Value)
                model.MaxValue = Convert.ToDouble(reader["MaxValue"]);

            if (reader["Sort"] != DBNull.Value)
                model.Sort = Convert.ToInt32(reader["Sort"]);

            if (reader["Delflag"] != DBNull.Value)
                model.Delflag = Convert.ToBoolean(reader["Delflag"]);

            if (reader["CreateDate"] != DBNull.Value)
                model.CreateDate = Convert.ToDateTime(reader["CreateDate"]);

        }

    }
}
